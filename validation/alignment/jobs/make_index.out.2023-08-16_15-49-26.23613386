Settings:
  Output files: "Cobalamin_index/Cobalamin_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Cobalamin.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 1125 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1125 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 856.286 (target: 1124)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (1125) for bucket 1
Getting block 2 of 7
  Reserving size (1125) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 3 of 7
  Reserving size (1125) for bucket 3
  Calculating Z arrays for bucket 2
Getting block 4 of 7
  Reserving size (1125) for bucket 4
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 1:
  Calculating Z arrays for bucket 4
Getting block 5 of 7
Getting block 6 of 7
  Reserving size (1125) for bucket 6
  bucket 1: 10%
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 2:
  Reserving size (1125) for bucket 5
  bucket 1: 20%
Getting block 7 of 7
  bucket 3: 10%
  Reserving size (1125) for bucket 7
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 5
  bucket 4: 10%
  bucket 2: 10%
  Calculating Z arrays for bucket 7
  bucket 1: 30%
  bucket 3: 20%
  bucket 2: 20%
  bucket 1: 40%
  bucket 4: 20%
  Entering block accumulator loop for bucket 7:
  bucket 1: 50%
  Entering block accumulator loop for bucket 5:
  bucket 2: 30%
  bucket 3: 30%
  bucket 7: 10%
  Entering block accumulator loop for bucket 6:
  bucket 4: 30%
  bucket 1: 60%
  bucket 5: 10%
  bucket 2: 40%
  bucket 3: 40%
  bucket 1: 70%
  bucket 7: 20%
  bucket 4: 40%
  bucket 6: 10%
  bucket 2: 50%
  bucket 1: 80%
  bucket 3: 50%
  bucket 7: 30%
  bucket 5: 20%
  bucket 1: 90%
  bucket 6: 20%
  bucket 7: 40%
  bucket 1: 100%
  bucket 2: 60%
  Sorting block of length 274 for bucket 1
  bucket 4: 50%
  (Using difference cover)
  bucket 6: 30%
  bucket 3: 60%
  bucket 5: 30%
  bucket 7: 50%
  bucket 2: 70%
  bucket 6: 40%
  bucket 4: 60%
  bucket 3: 70%
  bucket 5: 40%
  bucket 7: 60%
  bucket 2: 80%
  bucket 6: 50%
  bucket 4: 70%
  bucket 7: 70%
  bucket 3: 80%
  bucket 5: 50%
  bucket 2: 90%
  bucket 7: 80%
  bucket 6: 60%
  bucket 4: 80%
  bucket 3: 90%
  bucket 7: 90%
  bucket 5: 60%
  bucket 2: 100%
  Sorting block of length 1108 for bucket 2
  bucket 4: 90%
  bucket 7: 100%
  (Using difference cover)
  bucket 5: 70%
  bucket 3: 100%
  Sorting block of length 1045 for bucket 3
  bucket 5: 80%
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 628 for bucket 7
  (Using difference cover)
  bucket 6: 70%
  bucket 5: 90%
  Sorting block of length 943 for bucket 4
  (Using difference cover)
  bucket 6: 80%
  bucket 5: 100%
  Sorting block of length 1113 for bucket 5
  (Using difference cover)
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 883 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 275 for bucket 1
Returning block of 944 for bucket 4
  Sorting block time: 00:00:00
Returning block of 1046 for bucket 3
Returning block of 629 for bucket 7
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 1114 for bucket 5
Returning block of 1109 for bucket 2
  Sorting block time: 00:00:00
Returning block of 884 for bucket 6
Exited GFM loop
fchr[A]: 0
fchr[C]: 939
fchr[G]: 3034
fchr[T]: 5109
fchr[$]: 6000
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4196792 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.1.ht2
Wrote 1508 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 43269 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.5.ht2
Wrote 1508 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 6000
    gbwtLen: 6001
    nodes: 6001
    sz: 1500
    gbwtSz: 1501
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 376
    offsSz: 1504
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 32
    numLines: 32
    gbwtTotLen: 2048
    gbwtTotSz: 2048
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "Fluoride_index/Fluoride_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Fluoride.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 199 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 199 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 131.875 (target: 198)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (199) for bucket 1
Getting block 2 of 8
  Reserving size (199) for bucket 2
Getting block 3 of 8
  Calculating Z arrays for bucket 2
Getting block 4 of 8
Getting block 5 of 8
  Reserving size (199) for bucket 5
  Entering block accumulator loop for bucket 2:
Getting block 6 of 8
  Calculating Z arrays for bucket 1
  Reserving size (199) for bucket 4
  Reserving size (199) for bucket 6
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 5
Getting block 7 of 8
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 5:
Getting block 8 of 8
  Reserving size (199) for bucket 3
  Entering block accumulator loop for bucket 1:
  bucket 5: 10%
  bucket 2: 10%
  Calculating Z arrays for bucket 6
  bucket 2: 20%
  bucket 5: 20%
  Reserving size (199) for bucket 7
  Reserving size (199) for bucket 8
  bucket 1: 10%
  bucket 4: 10%
  bucket 2: 30%
  Calculating Z arrays for bucket 8
  bucket 4: 20%
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 7
  bucket 1: 20%
  bucket 4: 30%
  bucket 2: 40%
  Entering block accumulator loop for bucket 6:
  bucket 1: 30%
  bucket 5: 30%
  bucket 4: 40%
  Entering block accumulator loop for bucket 3:
  bucket 2: 50%
  bucket 5: 40%
  bucket 2: 60%
  bucket 1: 40%
  bucket 4: 50%
  Entering block accumulator loop for bucket 8:
  bucket 5: 50%
  bucket 4: 60%
  bucket 2: 70%
  bucket 4: 70%
  bucket 8: 10%
  Entering block accumulator loop for bucket 7:
  bucket 1: 50%
  bucket 2: 80%
  bucket 1: 60%
  bucket 4: 80%
  bucket 8: 20%
  bucket 2: 90%
  bucket 1: 70%
  bucket 2: 100%
  bucket 4: 90%
  bucket 1: 80%
  Sorting block of length 127 for bucket 2
  (Using difference cover)
  bucket 3: 10%
  bucket 4: 100%
  bucket 3: 20%
  Sorting block of length 142 for bucket 4
  (Using difference cover)
  bucket 8: 30%
  bucket 6: 10%
  bucket 3: 30%
  bucket 6: 20%
  bucket 1: 90%
  bucket 3: 40%
  bucket 6: 30%
  bucket 5: 60%
  bucket 6: 40%
  bucket 5: 70%
  bucket 3: 50%
  bucket 1: 100%
  bucket 8: 40%
  Sorting block of length 149 for bucket 1
  (Using difference cover)
  bucket 3: 60%
  bucket 6: 50%
  bucket 3: 70%
  bucket 6: 60%
  bucket 7: 10%
  bucket 8: 50%
  bucket 5: 80%
  bucket 3: 80%
  bucket 8: 60%
  bucket 7: 20%
  bucket 3: 90%
  bucket 5: 90%
  bucket 6: 70%
  bucket 5: 100%
  bucket 3: 100%
  bucket 8: 70%
  Sorting block of length 171 for bucket 3
  (Using difference cover)
  Sorting block of length 124 for bucket 5
  (Using difference cover)
  bucket 8: 80%
  bucket 6: 80%
  bucket 8: 90%
  bucket 7: 30%
  bucket 6: 90%
  bucket 8: 100%
  Sorting block of length 90 for bucket 8
  (Using difference cover)
  bucket 7: 40%
  bucket 6: 100%
  Sorting block of length 130 for bucket 6
  (Using difference cover)
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 122 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 128 for bucket 2
  Sorting block time: 00:00:00
Returning block of 143 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 123 for bucket 7
  Sorting block time: 00:00:00
Returning block of 131 for bucket 6
Returning block of 172 for bucket 3
Returning block of 150 for bucket 1
Returning block of 91 for bucket 8
  Sorting block time: 00:00:00
Returning block of 125 for bucket 5
Exited GFM loop
fchr[A]: 0
fchr[C]: 170
fchr[G]: 515
fchr[T]: 859
fchr[$]: 1062
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194907 bytes to primary GFM file: Fluoride_index/Fluoride_index.1.ht2
Wrote 272 bytes to secondary GFM file: Fluoride_index/Fluoride_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: Fluoride_index/Fluoride_index.5.ht2
Wrote 270 bytes to secondary GFM file: Fluoride_index/Fluoride_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1062
    gbwtLen: 1063
    nodes: 1063
    sz: 266
    gbwtSz: 266
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 67
    offsSz: 268
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "FMN_index/FMN_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  FMN.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 218 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 218 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 165.143 (target: 217)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (218) for bucket 1
Getting block 2 of 7
  Reserving size (218) for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 2
Getting block 4 of 7
  Reserving size (218) for bucket 4
  Entering block accumulator loop for bucket 2:
Getting block 5 of 7
  Reserving size (218) for bucket 5
Getting block 3 of 7
  Entering block accumulator loop for bucket 1:
  Reserving size (218) for bucket 3
Getting block 7 of 7
  Reserving size (218) for bucket 7
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 5
  bucket 2: 10%
  Entering block accumulator loop for bucket 7:
  Calculating Z arrays for bucket 4
  bucket 7: 10%
  bucket 2: 20%
  bucket 7: 20%
  bucket 2: 30%
Getting block 6 of 7
  Reserving size (218) for bucket 6
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 5:
  bucket 7: 30%
  Entering block accumulator loop for bucket 6:
  bucket 3: 10%
  bucket 7: 40%
  bucket 2: 40%
  bucket 1: 10%
  bucket 2: 50%
  bucket 7: 50%
  bucket 6: 10%
  Entering block accumulator loop for bucket 4:
  bucket 3: 20%
  bucket 7: 60%
  bucket 5: 10%
  bucket 3: 30%
  bucket 4: 10%
  bucket 5: 20%
  bucket 1: 20%
  bucket 6: 20%
  bucket 3: 40%
  bucket 2: 60%
  bucket 7: 70%
  bucket 2: 70%
  bucket 5: 30%
  bucket 1: 30%
  bucket 4: 20%
  bucket 3: 50%
  bucket 5: 40%
  bucket 7: 80%
  bucket 2: 80%
  bucket 1: 40%
  bucket 4: 30%
  bucket 2: 90%
  bucket 3: 60%
  bucket 7: 90%
  bucket 1: 50%
  bucket 6: 30%
  bucket 7: 100%
  bucket 6: 40%
  bucket 4: 40%
  bucket 1: 60%
  Sorting block of length 176 for bucket 7
  (Using difference cover)
  bucket 3: 70%
  bucket 6: 50%
  bucket 3: 80%
  bucket 2: 100%
  bucket 1: 70%
  bucket 5: 50%
  bucket 3: 90%
  bucket 1: 80%
  bucket 3: 100%
  Sorting block of length 187 for bucket 2
  (Using difference cover)
  bucket 4: 50%
  bucket 6: 60%
  bucket 1: 90%
  bucket 5: 60%
  bucket 1: 100%
  bucket 4: 60%
  Sorting block of length 153 for bucket 3
  (Using difference cover)
  bucket 4: 70%
  Sorting block of length 170 for bucket 1
  (Using difference cover)
  bucket 6: 70%
  bucket 5: 70%
  bucket 4: 80%
  bucket 5: 80%
  bucket 6: 80%
  bucket 5: 90%
  bucket 6: 90%
  bucket 5: 100%
  bucket 6: 100%
  bucket 4: 90%
  Sorting block of length 182 for bucket 5
  (Using difference cover)
  Sorting block of length 77 for bucket 6
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 211 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 171 for bucket 1
  Sorting block time: 00:00:00
Returning block of 78 for bucket 6
Returning block of 177 for bucket 7
Returning block of 188 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 212 for bucket 4
Returning block of 183 for bucket 5
  Sorting block time: 00:00:00
Returning block of 154 for bucket 3
Exited GFM loop
fchr[A]: 0
fchr[C]: 184
fchr[G]: 581
fchr[T]: 987
fchr[$]: 1162
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194966 bytes to primary GFM file: FMN_index/FMN_index.1.ht2
Wrote 296 bytes to secondary GFM file: FMN_index/FMN_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: FMN_index/FMN_index.5.ht2
Wrote 296 bytes to secondary GFM file: FMN_index/FMN_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1162
    gbwtLen: 1163
    nodes: 1163
    sz: 291
    gbwtSz: 291
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 73
    offsSz: 292
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 7
    numLines: 7
    gbwtTotLen: 448
    gbwtTotSz: 448
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "SAH_riboswitch_index/SAH_riboswitch_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  SAH_riboswitch.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 207 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 207 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 137.25 (target: 206)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (207) for bucket 1
  Calculating Z arrays for bucket 1
Getting block 2 of 8
  Entering block accumulator loop for bucket 1:
  Reserving size (207) for bucket 2
Getting block 3 of 8
  Calculating Z arrays for bucket 2
Getting block 5 of 8
  bucket 1: 10%
  Entering block accumulator loop for bucket 2:
Getting block 7 of 8
  Reserving size (207) for bucket 7
Getting block 4 of 8
Getting block 6 of 8
Getting block 8 of 8
  Reserving size (207) for bucket 8
  Reserving size (207) for bucket 6
  Reserving size (207) for bucket 4
  Reserving size (207) for bucket 3
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 8
  bucket 2: 10%
  bucket 1: 20%
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 8:
  bucket 1: 30%
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 6:
  Reserving size (207) for bucket 5
  bucket 1: 40%
  Entering block accumulator loop for bucket 7:
  bucket 2: 20%
  bucket 1: 50%
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 5
  bucket 2: 30%
  bucket 8: 10%
  bucket 2: 40%
  bucket 7: 10%
  bucket 8: 20%
  Entering block accumulator loop for bucket 3:
  bucket 8: 30%
  bucket 7: 20%
  Entering block accumulator loop for bucket 5:
  bucket 8: 40%
  bucket 7: 30%
  bucket 8: 50%
  bucket 2: 50%
  bucket 1: 60%
  bucket 7: 40%
  bucket 4: 10%
  bucket 7: 50%
  bucket 6: 10%
  bucket 5: 10%
  bucket 2: 60%
  bucket 7: 60%
  bucket 1: 70%
  bucket 2: 70%
  bucket 1: 80%
  bucket 4: 20%
  bucket 3: 10%
  bucket 4: 30%
  bucket 1: 90%
  bucket 7: 70%
  bucket 1: 100%
  bucket 7: 80%
  bucket 2: 80%
  bucket 7: 90%
  bucket 5: 20%
  bucket 3: 20%
  Sorting block of length 110 for bucket 1
  bucket 6: 20%
  bucket 8: 60%
  bucket 7: 100%
  bucket 5: 30%
  (Using difference cover)
  bucket 3: 30%
  Sorting block of length 90 for bucket 7
  (Using difference cover)
  bucket 3: 40%
  bucket 2: 90%
  bucket 8: 70%
  bucket 5: 40%
  bucket 4: 40%
  bucket 2: 100%
  bucket 6: 30%
  bucket 5: 50%
  bucket 6: 40%
  bucket 8: 80%
  bucket 5: 60%
  bucket 3: 50%
  bucket 5: 70%
  bucket 3: 60%
  bucket 5: 80%
  bucket 4: 50%
  bucket 3: 70%
  bucket 4: 60%
  bucket 5: 90%
  bucket 8: 90%
  bucket 4: 70%
  bucket 8: 100%
  bucket 6: 50%
  Sorting block of length 161 for bucket 8
  (Using difference cover)
  bucket 4: 80%
  Sorting block of length 192 for bucket 2
  (Using difference cover)
  bucket 3: 80%
  bucket 5: 100%
  bucket 3: 90%
  Sorting block of length 98 for bucket 5
  (Using difference cover)
  bucket 4: 90%
  bucket 3: 100%
  bucket 6: 60%
  bucket 4: 100%
  bucket 6: 70%
  Sorting block of length 146 for bucket 3
  (Using difference cover)
  bucket 6: 80%
  Sorting block of length 156 for bucket 4
  (Using difference cover)
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 145 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 91 for bucket 7
Returning block of 111 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 99 for bucket 5
Returning block of 193 for bucket 2
Returning block of 157 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 146 for bucket 6
Returning block of 147 for bucket 3
Returning block of 162 for bucket 8
Exited GFM loop
fchr[A]: 0
fchr[C]: 208
fchr[G]: 591
fchr[T]: 945
fchr[$]: 1105
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194911 bytes to primary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.1.ht2
Wrote 284 bytes to secondary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.5.ht2
Wrote 282 bytes to secondary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1105
    gbwtLen: 1106
    nodes: 1106
    sz: 277
    gbwtSz: 277
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 70
    offsSz: 280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "TPP_index/TPP_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  TPP.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 213 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 213 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 11 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 125.333 (target: 212)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 9
Getting block 2 of 9
Getting block 3 of 9
  Reserving size (213) for bucket 1
  Reserving size (213) for bucket 3
Getting block 5 of 9
  Calculating Z arrays for bucket 3
Getting block 6 of 9
  Calculating Z arrays for bucket 1
  Reserving size (213) for bucket 6
  Entering block accumulator loop for bucket 1:
  Reserving size (213) for bucket 5
  Calculating Z arrays for bucket 6
Getting block 8 of 9
Getting block 4 of 9
Getting block 7 of 9
Getting block 9 of 9
  Reserving size (213) for bucket 7
  Reserving size (213) for bucket 8
  Reserving size (213) for bucket 4
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 5
  bucket 1: 10%
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 7
  bucket 3: 10%
  Calculating Z arrays for bucket 8
  bucket 1: 20%
  Entering block accumulator loop for bucket 6:
  bucket 1: 30%
  Entering block accumulator loop for bucket 4:
  Reserving size (213) for bucket 2
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 7:
  Calculating Z arrays for bucket 2
  bucket 3: 20%
  bucket 1: 40%
  bucket 3: 30%
  bucket 6: 10%
  bucket 3: 40%
  Entering block accumulator loop for bucket 8:
  Reserving size (213) for bucket 9
  bucket 1: 50%
  Calculating Z arrays for bucket 9
  bucket 1: 60%
  bucket 3: 50%
  bucket 5: 10%
  bucket 7: 10%
  bucket 4: 10%
  Entering block accumulator loop for bucket 9:
  bucket 1: 70%
  bucket 6: 20%
  bucket 3: 60%
  Entering block accumulator loop for bucket 2:
  bucket 8: 10%
  bucket 5: 20%
  bucket 7: 20%
  bucket 4: 20%
  bucket 6: 30%
  bucket 8: 20%
  bucket 1: 80%
  bucket 2: 10%
  bucket 5: 30%
  bucket 4: 30%
  bucket 8: 30%
  bucket 1: 90%
  bucket 3: 70%
  bucket 5: 40%
  bucket 2: 20%
  bucket 7: 30%
  bucket 8: 40%
  bucket 1: 100%
  bucket 5: 50%
  bucket 9: 10%
  Sorting block of length 38 for bucket 1
  (Using difference cover)
  bucket 5: 60%
  bucket 9: 20%
  bucket 5: 70%
  bucket 7: 40%
  bucket 8: 50%
  bucket 2: 30%
  bucket 8: 60%
  bucket 3: 80%
  bucket 6: 40%
  bucket 8: 70%
  bucket 3: 90%
  bucket 8: 80%
  bucket 6: 50%
  bucket 7: 50%
  bucket 4: 40%
  bucket 9: 30%
  bucket 5: 80%
  bucket 8: 90%
  bucket 4: 50%
  bucket 3: 100%
  bucket 9: 40%
  bucket 7: 60%
  bucket 8: 100%
  bucket 7: 70%
  Sorting block of length 88 for bucket 3
  (Using difference cover)
  bucket 2: 40%
  bucket 6: 60%
  bucket 9: 50%
  bucket 2: 50%
  Sorting block of length 149 for bucket 8
  (Using difference cover)
  bucket 5: 90%
  bucket 6: 70%
  bucket 7: 80%
  bucket 5: 100%
  bucket 4: 60%
  bucket 9: 60%
  bucket 4: 70%
  bucket 2: 60%
  bucket 4: 80%
  bucket 9: 70%
  bucket 7: 90%
  bucket 6: 80%
  bucket 9: 80%
  bucket 6: 90%
  bucket 9: 90%
  bucket 2: 70%
  bucket 7: 100%
  bucket 2: 80%
  bucket 6: 100%
  bucket 2: 90%
  Sorting block of length 200 for bucket 6
  (Using difference cover)
  bucket 2: 100%
  Sorting block of length 114 for bucket 5
  (Using difference cover)
  Sorting block of length 138 for bucket 7
  (Using difference cover)
  bucket 4: 90%
  Sorting block of length 183 for bucket 2
  bucket 9: 100%
  Sorting block of length 85 for bucket 9
  (Using difference cover)
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 133 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 39 for bucket 1
  Sorting block time: 00:00:00
Returning block of 150 for bucket 8
  Sorting block time: 00:00:00
Returning block of 184 for bucket 2
Returning block of 86 for bucket 9
Returning block of 89 for bucket 3
  Sorting block time: 00:00:00
Returning block of 115 for bucket 5
  Sorting block time: 00:00:00
Returning block of 134 for bucket 4
  Sorting block time: 00:00:00
Returning block of 139 for bucket 7
  Sorting block time: 00:00:00
Returning block of 201 for bucket 6
Exited GFM loop
fchr[A]: 0
fchr[C]: 171
fchr[G]: 568
fchr[T]: 955
fchr[$]: 1136
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194902 bytes to primary GFM file: TPP_index/TPP_index.1.ht2
Wrote 292 bytes to secondary GFM file: TPP_index/TPP_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: TPP_index/TPP_index.5.ht2
Wrote 290 bytes to secondary GFM file: TPP_index/TPP_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1136
    gbwtLen: 1137
    nodes: 1137
    sz: 284
    gbwtSz: 285
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 72
    offsSz: 288
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:01
Settings:
  Output files: "yybP-ykoY_index/yybP-ykoY_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  yybP-ykoY.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 429 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 429 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 285.125 (target: 428)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (429) for bucket 1
Getting block 2 of 8
  Reserving size (429) for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 2
Getting block 3 of 8
  Reserving size (429) for bucket 3
Getting block 6 of 8
  Reserving size (429) for bucket 6
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 1:
Getting block 4 of 8
  bucket 1: 10%
  Calculating Z arrays for bucket 6
Getting block 8 of 8
  Reserving size (429) for bucket 8
Getting block 7 of 8
  Calculating Z arrays for bucket 3
  Reserving size (429) for bucket 4
Getting block 5 of 8
  Reserving size (429) for bucket 7
  Reserving size (429) for bucket 5
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 8
  bucket 1: 20%
  Entering block accumulator loop for bucket 3:
  bucket 2: 10%
  bucket 1: 30%
  Entering block accumulator loop for bucket 8:
  Calculating Z arrays for bucket 7
  bucket 1: 40%
  bucket 2: 20%
  Entering block accumulator loop for bucket 6:
  Calculating Z arrays for bucket 5
  bucket 1: 50%
  bucket 2: 30%
  bucket 6: 10%
  bucket 1: 60%
  bucket 8: 10%
  bucket 6: 20%
  bucket 2: 40%
  bucket 1: 70%
  bucket 2: 50%
  bucket 6: 30%
  bucket 3: 10%
  bucket 2: 60%
  bucket 6: 40%
  bucket 3: 20%
  bucket 2: 70%
  bucket 6: 50%
  bucket 3: 30%
  bucket 2: 80%
  bucket 6: 60%
  bucket 8: 20%
  bucket 1: 80%
  bucket 2: 90%
  bucket 1: 90%
  bucket 6: 70%
  bucket 3: 40%
  bucket 1: 100%
  bucket 2: 100%
  bucket 6: 80%
  Sorting block of length 278 for bucket 1
  (Using difference cover)
  Sorting block of length 217 for bucket 2
  (Using difference cover)
  bucket 8: 30%
  bucket 3: 50%
  bucket 8: 40%
  bucket 6: 90%
  bucket 3: 60%
  bucket 8: 50%
  bucket 6: 100%
  bucket 3: 70%
  Sorting block of length 366 for bucket 6
  bucket 8: 60%
  bucket 3: 80%
  bucket 8: 70%
  (Using difference cover)
  bucket 3: 90%
  bucket 8: 80%
  bucket 3: 100%
  bucket 8: 90%
  Sorting block of length 219 for bucket 3
  (Using difference cover)
  bucket 8: 100%
  Sorting block of length 320 for bucket 8
  (Using difference cover)
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 4:
  bucket 7: 10%
  bucket 4: 10%
  bucket 7: 20%
  bucket 4: 20%
  bucket 7: 30%
  bucket 4: 30%
  bucket 7: 40%
  Entering block accumulator loop for bucket 5:
  bucket 7: 50%
  bucket 4: 40%
  bucket 5: 10%
  bucket 7: 60%
  bucket 4: 50%
  bucket 5: 20%
  bucket 7: 70%
  bucket 4: 60%
  bucket 5: 30%
  bucket 7: 80%
  bucket 4: 70%
  bucket 5: 40%
  bucket 7: 90%
  bucket 4: 80%
  bucket 5: 50%
  bucket 7: 100%
  bucket 4: 90%
  Sorting block of length 144 for bucket 7
  (Using difference cover)
  bucket 5: 60%
  bucket 4: 100%
  Sorting block of length 347 for bucket 4
  (Using difference cover)
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 390 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 279 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 367 for bucket 6
  Sorting block time: 00:00:00
Returning block of 220 for bucket 3
Returning block of 218 for bucket 2
  Sorting block time: 00:00:00
Returning block of 321 for bucket 8
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 348 for bucket 4
Returning block of 391 for bucket 5
Returning block of 145 for bucket 7
Exited GFM loop
fchr[A]: 0
fchr[C]: 364
fchr[G]: 1173
fchr[T]: 1856
fchr[$]: 2288
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195347 bytes to primary GFM file: yybP-ykoY_index/yybP-ykoY_index.1.ht2
Wrote 580 bytes to secondary GFM file: yybP-ykoY_index/yybP-ykoY_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17325 bytes to primary GFM file: yybP-ykoY_index/yybP-ykoY_index.5.ht2
Wrote 578 bytes to secondary GFM file: yybP-ykoY_index/yybP-ykoY_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2288
    gbwtLen: 2289
    nodes: 2289
    sz: 572
    gbwtSz: 573
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 144
    offsSz: 576
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 12
    numLines: 12
    gbwtTotLen: 768
    gbwtTotSz: 768
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
