Settings:
  Output files: "Cobalamin_index/Cobalamin_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Cobalamin.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 910 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 910 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 606 (target: 909)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (910) for bucket 1
Getting block 2 of 8
  Reserving size (910) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 3 of 8
  Reserving size (910) for bucket 3
Getting block 4 of 8
  Entering block accumulator loop for bucket 1:
Getting block 5 of 8
Getting block 6 of 8
  Reserving size (910) for bucket 6
  bucket 1: 10%
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 2
  Reserving size (910) for bucket 4
Getting block 7 of 8
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 6
  Reserving size (910) for bucket 5
  bucket 1: 20%
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 3:
  Reserving size (910) for bucket 7
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 6:
  Calculating Z arrays for bucket 7
Getting block 8 of 8
  Reserving size (910) for bucket 8
  Entering block accumulator loop for bucket 7:
  Calculating Z arrays for bucket 8
  bucket 2: 10%
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 8:
  bucket 6: 10%
  Entering block accumulator loop for bucket 4:
  bucket 3: 10%
  bucket 6: 20%
  bucket 2: 20%
  bucket 1: 30%
  bucket 6: 30%
  bucket 8: 10%
  bucket 4: 10%
  bucket 6: 40%
  bucket 3: 20%
  bucket 8: 20%
  bucket 6: 50%
  bucket 2: 30%
  bucket 8: 30%
  bucket 6: 60%
  bucket 7: 10%
  bucket 1: 40%
  bucket 6: 70%
  bucket 8: 40%
  bucket 5: 10%
  bucket 1: 50%
  bucket 6: 80%
  bucket 2: 40%
  bucket 8: 50%
  bucket 1: 60%
  bucket 5: 20%
  bucket 6: 90%
  bucket 8: 60%
  bucket 7: 20%
  bucket 6: 100%
  bucket 1: 70%
  bucket 8: 70%
  bucket 4: 20%
  bucket 1: 80%
  Sorting block of length 201 for bucket 6
  (Using difference cover)
  bucket 8: 80%
  bucket 1: 90%
  bucket 5: 30%
  bucket 4: 30%
  bucket 2: 50%
  bucket 7: 30%
  bucket 3: 30%
  bucket 8: 90%
  bucket 5: 40%
  bucket 4: 40%
  bucket 2: 60%
  bucket 1: 100%
  Sorting block of length 845 for bucket 1
  (Using difference cover)
  bucket 8: 100%
  Sorting block of length 35 for bucket 8
  (Using difference cover)
  bucket 5: 50%
  bucket 3: 40%
  bucket 2: 70%
  bucket 4: 50%
  bucket 7: 40%
  bucket 5: 60%
  bucket 2: 80%
  bucket 3: 50%
  bucket 4: 60%
  bucket 7: 50%
  bucket 5: 70%
  bucket 2: 90%
  bucket 3: 60%
  bucket 4: 70%
  bucket 5: 80%
  bucket 7: 60%
  bucket 2: 100%
  Sorting block of length 582 for bucket 2
  (Using difference cover)
  bucket 3: 70%
  bucket 5: 90%
  bucket 7: 70%
  bucket 4: 80%
  bucket 3: 80%
  bucket 5: 100%
  bucket 7: 80%
  Sorting block of length 888 for bucket 5
  (Using difference cover)
  bucket 4: 90%
  bucket 7: 90%
  bucket 3: 90%
  bucket 4: 100%
  Sorting block of length 868 for bucket 4
  (Using difference cover)
  bucket 7: 100%
  bucket 3: 100%
  Sorting block of length 876 for bucket 7
  (Using difference cover)
  Sorting block of length 553 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 202 for bucket 6
  Sorting block time: 00:00:00
Returning block of 36 for bucket 8
  Sorting block time: 00:00:00
Returning block of 846 for bucket 1
  Sorting block time: 00:00:00
Returning block of 583 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 889 for bucket 5
  Sorting block time: 00:00:00
Returning block of 554 for bucket 3
Returning block of 877 for bucket 7
  Sorting block time: 00:00:00
Returning block of 869 for bucket 4
Exited GFM loop
fchr[A]: 0
fchr[C]: 921
fchr[G]: 2470
fchr[T]: 3940
fchr[$]: 4855
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4196347 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.1.ht2
Wrote 1220 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 34621 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.5.ht2
Wrote 1222 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 4855
    gbwtLen: 4856
    nodes: 4856
    sz: 1214
    gbwtSz: 1215
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 304
    offsSz: 1216
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 26
    numLines: 26
    gbwtTotLen: 1664
    gbwtTotSz: 1664
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "FMN_index/FMN_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  FMN.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 219 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 219 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 166.143 (target: 218)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (219) for bucket 1
Getting block 2 of 7
  Reserving size (219) for bucket 2
Getting block 3 of 7
  Reserving size (219) for bucket 3
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 1
Getting block 5 of 7
  Reserving size (219) for bucket 5
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 3
Getting block 4 of 7
  Reserving size (219) for bucket 4
  Entering block accumulator loop for bucket 1:
  bucket 2: 10%
Getting block 7 of 7
  bucket 2: 20%
  Reserving size (219) for bucket 7
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 3:
  bucket 1: 10%
  bucket 3: 10%
  bucket 2: 30%
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 7
  bucket 1: 20%
  bucket 2: 40%
  Entering block accumulator loop for bucket 7:
  bucket 2: 50%
  Calculating Z arrays for bucket 5
  bucket 2: 60%
Getting block 6 of 7
  Entering block accumulator loop for bucket 5:
  bucket 3: 20%
  bucket 2: 70%
  bucket 7: 10%
  bucket 4: 10%
  bucket 2: 80%
  Reserving size (219) for bucket 6
  bucket 4: 20%
  bucket 5: 10%
  bucket 7: 20%
  Calculating Z arrays for bucket 6
  bucket 3: 30%
  bucket 7: 30%
  bucket 3: 40%
  bucket 2: 90%
  bucket 5: 20%
  bucket 2: 100%
  bucket 5: 30%
  Entering block accumulator loop for bucket 6:
  bucket 4: 30%
  bucket 3: 50%
  bucket 6: 10%
  bucket 3: 60%
  bucket 1: 30%
  bucket 6: 20%
  bucket 4: 40%
  bucket 1: 40%
  bucket 4: 50%
  Sorting block of length 177 for bucket 2
  bucket 5: 40%
  (Using difference cover)
  bucket 6: 30%
  bucket 3: 70%
  bucket 4: 60%
  bucket 6: 40%
  bucket 3: 80%
  bucket 5: 50%
  bucket 1: 50%
  bucket 4: 70%
  bucket 7: 40%
  bucket 6: 50%
  bucket 7: 50%
  bucket 4: 80%
  bucket 1: 60%
  bucket 7: 60%
  bucket 6: 60%
  bucket 1: 70%
  bucket 3: 90%
  bucket 4: 90%
  bucket 3: 100%
  bucket 1: 80%
  bucket 6: 70%
  bucket 7: 70%
  bucket 4: 100%
  bucket 6: 80%
  bucket 1: 90%
  Sorting block of length 189 for bucket 4
  (Using difference cover)
  Sorting block of length 216 for bucket 3
  (Using difference cover)
  bucket 5: 60%
  bucket 6: 90%
  bucket 7: 80%
  bucket 6: 100%
  bucket 1: 100%
  Sorting block of length 208 for bucket 6
  (Using difference cover)
  Sorting block of length 206 for bucket 1
  (Using difference cover)
  bucket 5: 70%
  bucket 7: 90%
  bucket 5: 80%
  bucket 7: 100%
  Sorting block of length 90 for bucket 7
  bucket 5: 90%
  bucket 5: 100%
  (Using difference cover)
  Sorting block of length 77 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 78 for bucket 5
  Sorting block time: 00:00:00
Returning block of 178 for bucket 2
Returning block of 207 for bucket 1
Returning block of 217 for bucket 3
Returning block of 91 for bucket 7
  Sorting block time: 00:00:00
Returning block of 209 for bucket 6
  Sorting block time: 00:00:00
Returning block of 190 for bucket 4
Exited GFM loop
fchr[A]: 0
fchr[C]: 249
fchr[G]: 600
fchr[T]: 933
fchr[$]: 1169
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194964 bytes to primary GFM file: FMN_index/FMN_index.1.ht2
Wrote 300 bytes to secondary GFM file: FMN_index/FMN_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: FMN_index/FMN_index.5.ht2
Wrote 298 bytes to secondary GFM file: FMN_index/FMN_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1169
    gbwtLen: 1170
    nodes: 1170
    sz: 293
    gbwtSz: 293
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 74
    offsSz: 296
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 7
    numLines: 7
    gbwtTotLen: 448
    gbwtTotSz: 448
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "SAH_riboswitch_index/SAH_riboswitch_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  SAH_riboswitch.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 207 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 207 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 122 (target: 206)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 9
  Reserving size (207) for bucket 1
Getting block 2 of 9
  Reserving size (207) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 3 of 9
  Reserving size (207) for bucket 3
  Calculating Z arrays for bucket 2
Getting block 4 of 9
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 3
Getting block 5 of 9
  Reserving size (207) for bucket 5
  Entering block accumulator loop for bucket 3:
Getting block 8 of 9
Getting block 7 of 9
  Calculating Z arrays for bucket 5
  bucket 2: 10%
  Reserving size (207) for bucket 8
  Reserving size (207) for bucket 4
  bucket 2: 20%
Getting block 6 of 9
  Entering block accumulator loop for bucket 5:
  Calculating Z arrays for bucket 8
  bucket 2: 30%
  Reserving size (207) for bucket 7
  Calculating Z arrays for bucket 4
  bucket 2: 40%
  Reserving size (207) for bucket 6
  Calculating Z arrays for bucket 7
Getting block 9 of 9
  Entering block accumulator loop for bucket 1:
  bucket 2: 50%
  Calculating Z arrays for bucket 6
  bucket 5: 10%
  Reserving size (207) for bucket 9
  bucket 2: 60%
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 8:
  bucket 5: 20%
  Calculating Z arrays for bucket 9
  bucket 2: 70%
  Entering block accumulator loop for bucket 4:
  bucket 3: 10%
  bucket 2: 80%
  bucket 7: 10%
  bucket 8: 10%
  bucket 4: 10%
  bucket 1: 10%
  bucket 2: 90%
  bucket 8: 20%
  bucket 2: 100%
  bucket 7: 20%
  bucket 1: 20%
  Sorting block of length 168 for bucket 2
  (Using difference cover)
  bucket 8: 30%
  bucket 7: 30%
  bucket 4: 20%
  bucket 7: 40%
  Entering block accumulator loop for bucket 6:
  bucket 8: 40%
  bucket 7: 50%
  bucket 8: 50%
  bucket 4: 30%
  bucket 8: 60%
  Entering block accumulator loop for bucket 9:
  bucket 5: 30%
  bucket 8: 70%
  bucket 5: 40%
  bucket 7: 60%
  bucket 5: 50%
  bucket 4: 40%
  bucket 7: 70%
  bucket 8: 80%
  bucket 4: 50%
  bucket 3: 20%
  bucket 6: 10%
  bucket 8: 90%
  bucket 5: 60%
  bucket 1: 30%
  bucket 6: 20%
  bucket 4: 60%
  bucket 5: 70%
  bucket 7: 80%
  bucket 8: 100%
  bucket 7: 90%
  bucket 1: 40%
  Sorting block of length 147 for bucket 8
  (Using difference cover)
  bucket 5: 80%
  bucket 3: 30%
  bucket 9: 10%
  bucket 5: 90%
  bucket 4: 70%
  bucket 3: 40%
  bucket 7: 100%
  bucket 3: 50%
  bucket 6: 30%
  bucket 1: 50%
  bucket 3: 60%
  bucket 4: 80%
  bucket 3: 70%
  bucket 9: 20%
  Sorting block of length 107 for bucket 7
  (Using difference cover)
  bucket 5: 100%
  bucket 1: 60%
  Sorting block of length 172 for bucket 5
  (Using difference cover)
  bucket 9: 30%
  bucket 6: 40%
  bucket 4: 90%
  bucket 3: 80%
  bucket 4: 100%
  bucket 1: 70%
  bucket 6: 50%
  Sorting block of length 137 for bucket 4
  (Using difference cover)
  bucket 9: 40%
  bucket 3: 90%
  bucket 1: 80%
  bucket 9: 50%
  bucket 6: 60%
  bucket 3: 100%
  bucket 6: 70%
  bucket 9: 60%
  bucket 6: 80%
  bucket 1: 90%
  bucket 6: 90%
  bucket 9: 70%
  bucket 6: 100%
  Sorting block of length 124 for bucket 6
  (Using difference cover)
  bucket 1: 100%
  Sorting block of length 42 for bucket 1
  (Using difference cover)
  Sorting block of length 91 for bucket 3
  (Using difference cover)
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 110 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 169 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 108 for bucket 7
  Sorting block time: 00:00:00
Returning block of 173 for bucket 5
Returning block of 148 for bucket 8
Returning block of 111 for bucket 9
Returning block of 138 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 125 for bucket 6
Returning block of 92 for bucket 3
Returning block of 43 for bucket 1
Exited GFM loop
fchr[A]: 0
fchr[C]: 225
fchr[G]: 549
fchr[T]: 872
fchr[$]: 1106
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194913 bytes to primary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.1.ht2
Wrote 284 bytes to secondary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.5.ht2
Wrote 282 bytes to secondary GFM file: SAH_riboswitch_index/SAH_riboswitch_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1106
    gbwtLen: 1107
    nodes: 1107
    sz: 277
    gbwtSz: 277
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 70
    offsSz: 280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:01
Settings:
  Output files: "TPP_index/TPP_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  TPP.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 207 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 207 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 137.25 (target: 206)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (207) for bucket 1
Getting block 2 of 8
  Reserving size (207) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 4 of 8
  Calculating Z arrays for bucket 2
Getting block 5 of 8
Getting block 8 of 8
  Reserving size (207) for bucket 8
  Entering block accumulator loop for bucket 1:
Getting block 3 of 8
  Reserving size (207) for bucket 4
Getting block 6 of 8
  Entering block accumulator loop for bucket 2:
  Reserving size (207) for bucket 5
  Reserving size (207) for bucket 6
  Reserving size (207) for bucket 3
  Calculating Z arrays for bucket 5
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 6
Getting block 7 of 8
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 4:
  bucket 6: 10%
  Calculating Z arrays for bucket 8
  bucket 4: 10%
  bucket 2: 10%
  Calculating Z arrays for bucket 3
  bucket 6: 20%
  bucket 2: 20%
  bucket 4: 20%
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 5:
  bucket 6: 30%
  bucket 3: 10%
  bucket 5: 10%
  Entering block accumulator loop for bucket 8:
  bucket 2: 30%
  Reserving size (207) for bucket 7
  bucket 6: 40%
  bucket 3: 20%
  Calculating Z arrays for bucket 7
  bucket 2: 40%
  bucket 1: 10%
  bucket 2: 50%
  bucket 8: 10%
  bucket 1: 20%
  Entering block accumulator loop for bucket 7:
  bucket 6: 50%
  bucket 2: 60%
  bucket 3: 30%
  bucket 8: 20%
  bucket 2: 70%
  bucket 5: 20%
  bucket 8: 30%
  bucket 5: 30%
  bucket 8: 40%
  bucket 4: 30%
  bucket 7: 10%
  bucket 5: 40%
  bucket 3: 40%
  bucket 5: 50%
  bucket 7: 20%
  bucket 4: 40%
  bucket 3: 50%
  bucket 7: 30%
  bucket 5: 60%
  bucket 6: 60%
  bucket 7: 40%
  bucket 3: 60%
  bucket 1: 30%
  bucket 6: 70%
  bucket 5: 70%
  bucket 6: 80%
  bucket 3: 70%
  bucket 6: 90%
  bucket 3: 80%
  bucket 2: 80%
  bucket 4: 50%
  bucket 5: 80%
  bucket 3: 90%
  bucket 5: 90%
  bucket 8: 50%
  bucket 5: 100%
  bucket 1: 40%
  bucket 7: 50%
  bucket 4: 60%
  bucket 6: 100%
  Sorting block of length 204 for bucket 5
  (Using difference cover)
  Sorting block of length 123 for bucket 6
  (Using difference cover)
  bucket 3: 100%
  bucket 2: 90%
  bucket 4: 70%
  bucket 2: 100%
  bucket 4: 80%
  bucket 7: 60%
  bucket 1: 50%
  bucket 4: 90%
  bucket 8: 60%
  bucket 7: 70%
  Sorting block of length 162 for bucket 2
  (Using difference cover)
  bucket 7: 80%
  Sorting block of length 91 for bucket 3
  (Using difference cover)
  bucket 4: 100%
  bucket 1: 60%
  bucket 8: 70%
  Sorting block of length 121 for bucket 4
  (Using difference cover)
  bucket 7: 90%
  bucket 8: 80%
  bucket 7: 100%
  bucket 1: 70%
  Sorting block of length 196 for bucket 7
  bucket 8: 90%
  (Using difference cover)
  bucket 1: 80%
  bucket 8: 100%
  Sorting block of length 99 for bucket 8
  (Using difference cover)
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 102 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 122 for bucket 4
  Sorting block time: 00:00:00
Returning block of 100 for bucket 8
  Sorting block time: 00:00:00
Returning block of 205 for bucket 5
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 163 for bucket 2
Returning block of 197 for bucket 7
Returning block of 92 for bucket 3
Returning block of 124 for bucket 6
  Sorting block time: 00:00:00
Returning block of 103 for bucket 1
Exited GFM loop
fchr[A]: 0
fchr[C]: 216
fchr[G]: 544
fchr[T]: 874
fchr[$]: 1105
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194902 bytes to primary GFM file: TPP_index/TPP_index.1.ht2
Wrote 284 bytes to secondary GFM file: TPP_index/TPP_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: TPP_index/TPP_index.5.ht2
Wrote 282 bytes to secondary GFM file: TPP_index/TPP_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1105
    gbwtLen: 1106
    nodes: 1106
    sz: 277
    gbwtSz: 277
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 70
    offsSz: 280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "ykkC-yxkD_index/ykkC-yxkD_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ykkC-yxkD.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 207 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 207 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 156.429 (target: 206)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (207) for bucket 1
Getting block 2 of 7
  Reserving size (207) for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 2
Getting block 3 of 7
  Entering block accumulator loop for bucket 1:
  Reserving size (207) for bucket 3
  bucket 1: 10%
  Calculating Z arrays for bucket 3
Getting block 6 of 7
Getting block 7 of 7
Getting block 4 of 7
  Reserving size (207) for bucket 4
  Reserving size (207) for bucket 6
  Reserving size (207) for bucket 7
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 7
  bucket 1: 20%
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 6:
Getting block 5 of 7
  Entering block accumulator loop for bucket 4:
  bucket 6: 10%
  Entering block accumulator loop for bucket 2:
  Reserving size (207) for bucket 5
  bucket 4: 10%
  bucket 1: 30%
  bucket 6: 20%
  Calculating Z arrays for bucket 5
  bucket 3: 10%
  bucket 2: 10%
  bucket 6: 30%
  Entering block accumulator loop for bucket 7:
  bucket 6: 40%
  bucket 4: 20%
  bucket 2: 20%
  bucket 6: 50%
  bucket 7: 10%
  bucket 6: 60%
  bucket 7: 20%
  bucket 4: 30%
  bucket 1: 40%
  bucket 6: 70%
  bucket 4: 40%
  bucket 1: 50%
  bucket 2: 30%
  bucket 4: 50%
  bucket 2: 40%
  bucket 1: 60%
  bucket 4: 60%
  bucket 6: 80%
  bucket 3: 20%
  bucket 1: 70%
  bucket 4: 70%
  bucket 7: 30%
  bucket 1: 80%
  bucket 7: 40%
  bucket 3: 30%
  bucket 4: 80%
  bucket 7: 50%
  Entering block accumulator loop for bucket 5:
  bucket 4: 90%
  bucket 6: 90%
  bucket 2: 50%
  bucket 1: 90%
  bucket 4: 100%
  bucket 3: 40%
  bucket 6: 100%
  Sorting block of length 168 for bucket 4
  bucket 1: 100%
  bucket 2: 60%
  (Using difference cover)
  Sorting block of length 168 for bucket 6
  (Using difference cover)
  bucket 3: 50%
  bucket 7: 60%
  bucket 3: 60%
  bucket 7: 70%
  bucket 5: 10%
  bucket 7: 80%
  Sorting block of length 195 for bucket 1
  (Using difference cover)
  bucket 5: 20%
  bucket 7: 90%
  bucket 2: 70%
  bucket 7: 100%
  Sorting block of length 110 for bucket 7
  (Using difference cover)
  bucket 5: 30%
  bucket 2: 80%
  bucket 3: 70%
  bucket 5: 40%
  bucket 2: 90%
  bucket 3: 80%
  bucket 5: 50%
  bucket 2: 100%
  bucket 5: 60%
  bucket 3: 90%
  Sorting block of length 132 for bucket 2
  (Using difference cover)
  bucket 3: 100%
  Sorting block of length 118 for bucket 3
  (Using difference cover)
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 204 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 169 for bucket 4
Returning block of 111 for bucket 7
Returning block of 169 for bucket 6
  Sorting block time: 00:00:00
Returning block of 196 for bucket 1
  Sorting block time: 00:00:00
Returning block of 133 for bucket 2
  Sorting block time: 00:00:00
Returning block of 205 for bucket 5
  Sorting block time: 00:00:00
Returning block of 119 for bucket 3
Exited GFM loop
fchr[A]: 0
fchr[C]: 224
fchr[G]: 594
fchr[T]: 906
fchr[$]: 1101
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194908 bytes to primary GFM file: ykkC-yxkD_index/ykkC-yxkD_index.1.ht2
Wrote 280 bytes to secondary GFM file: ykkC-yxkD_index/ykkC-yxkD_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: ykkC-yxkD_index/ykkC-yxkD_index.5.ht2
Wrote 280 bytes to secondary GFM file: ykkC-yxkD_index/ykkC-yxkD_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1101
    gbwtLen: 1102
    nodes: 1102
    sz: 276
    gbwtSz: 276
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 69
    offsSz: 276
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "yybP-ykoY_index/yybP-ykoY_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  yybP-ykoY.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 429 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 429 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 285.125 (target: 428)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (429) for bucket 1
Getting block 2 of 8
  Reserving size (429) for bucket 2
Getting block 3 of 8
Getting block 4 of 8
Getting block 5 of 8
  Calculating Z arrays for bucket 2
Getting block 6 of 8
  Calculating Z arrays for bucket 1
  Reserving size (429) for bucket 4
Getting block 7 of 8
  Reserving size (429) for bucket 6
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 1:
Getting block 8 of 8
  Reserving size (429) for bucket 8
  Reserving size (429) for bucket 3
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 2:
  Reserving size (429) for bucket 5
  Reserving size (429) for bucket 7
  bucket 2: 10%
  bucket 4: 10%
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 6
  bucket 4: 20%
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 8
  bucket 2: 20%
  bucket 4: 30%
  bucket 3: 10%
  bucket 2: 30%
  Calculating Z arrays for bucket 5
  bucket 2: 40%
  bucket 3: 20%
  Entering block accumulator loop for bucket 8:
  Entering block accumulator loop for bucket 6:
  bucket 4: 40%
  bucket 3: 30%
  bucket 8: 10%
  bucket 4: 50%
  Entering block accumulator loop for bucket 7:
  bucket 8: 20%
  bucket 6: 10%
  bucket 3: 40%
  Entering block accumulator loop for bucket 5:
  bucket 2: 50%
  bucket 4: 60%
  bucket 3: 50%
  bucket 6: 20%
  bucket 5: 10%
  bucket 7: 10%
  bucket 4: 70%
  bucket 6: 30%
  bucket 5: 20%
  bucket 4: 80%
  bucket 2: 60%
  bucket 6: 40%
  bucket 5: 30%
  bucket 7: 20%
  bucket 3: 60%
  bucket 1: 10%
  bucket 2: 70%
  bucket 5: 40%
  bucket 6: 50%
  bucket 3: 70%
  bucket 4: 90%
  bucket 8: 30%
  bucket 3: 80%
  bucket 1: 20%
  bucket 2: 80%
  bucket 5: 50%
  bucket 1: 30%
  bucket 4: 100%
  bucket 3: 90%
  Sorting block of length 228 for bucket 4
  (Using difference cover)
  bucket 7: 30%
  bucket 5: 60%
  bucket 2: 90%
  bucket 8: 40%
  bucket 6: 60%
  bucket 7: 40%
  bucket 1: 40%
  bucket 5: 70%
  bucket 1: 50%
  bucket 7: 50%
  bucket 1: 60%
  bucket 5: 80%
  bucket 7: 60%
  bucket 6: 70%
  bucket 2: 100%
  bucket 7: 70%
  bucket 1: 70%
  bucket 3: 100%
  bucket 8: 50%
  Sorting block of length 304 for bucket 2
  (Using difference cover)
  bucket 8: 60%
  bucket 5: 90%
  bucket 8: 70%
  bucket 6: 80%
  bucket 7: 80%
  bucket 1: 80%
  bucket 5: 100%
  bucket 6: 90%
  bucket 7: 90%
  bucket 8: 80%
  bucket 6: 100%
  Sorting block of length 398 for bucket 6
  (Using difference cover)
  Sorting block of length 241 for bucket 3
  (Using difference cover)
  Sorting block of length 212 for bucket 5
  (Using difference cover)
  bucket 1: 90%
  bucket 8: 90%
  bucket 1: 100%
  bucket 8: 100%
  Sorting block of length 154 for bucket 1
  (Using difference cover)
  Sorting block of length 387 for bucket 8
  (Using difference cover)
  bucket 7: 100%
  Sorting block of length 357 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 305 for bucket 2
  Sorting block time: 00:00:00
Returning block of 229 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 242 for bucket 3
  Sorting block time: 00:00:00
Returning block of 399 for bucket 6
Returning block of 213 for bucket 5
  Sorting block time: 00:00:00
Returning block of 388 for bucket 8
  Sorting block time: 00:00:00
Returning block of 358 for bucket 7
  Sorting block time: 00:00:00
Returning block of 155 for bucket 1
Exited GFM loop
fchr[A]: 0
fchr[C]: 434
fchr[G]: 1131
fchr[T]: 1826
fchr[$]: 2288
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195347 bytes to primary GFM file: yybP-ykoY_index/yybP-ykoY_index.1.ht2
Wrote 580 bytes to secondary GFM file: yybP-ykoY_index/yybP-ykoY_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17325 bytes to primary GFM file: yybP-ykoY_index/yybP-ykoY_index.5.ht2
Wrote 578 bytes to secondary GFM file: yybP-ykoY_index/yybP-ykoY_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2288
    gbwtLen: 2289
    nodes: 2289
    sz: 572
    gbwtSz: 573
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 144
    offsSz: 576
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 12
    numLines: 12
    gbwtTotLen: 768
    gbwtTotSz: 768
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
