Settings:
  Output files: "Cobalamin_index/Cobalamin_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Cobalamin.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 223 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 223 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 147.75 (target: 222)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (223) for bucket 1
Getting block 3 of 8
Getting block 4 of 8
  Reserving size (223) for bucket 4
  Reserving size (223) for bucket 3
Getting block 2 of 8
  Calculating Z arrays for bucket 3
  Reserving size (223) for bucket 2
Getting block 5 of 8
  Calculating Z arrays for bucket 1
Getting block 7 of 8
  Calculating Z arrays for bucket 4
Getting block 6 of 8
  Entering block accumulator loop for bucket 4:
  Reserving size (223) for bucket 6
  Reserving size (223) for bucket 7
  Calculating Z arrays for bucket 2
  Reserving size (223) for bucket 5
  bucket 4: 10%
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 3:
Getting block 8 of 8
  bucket 4: 20%
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 1:
  Entering block accumulator loop for bucket 7:
  bucket 1: 10%
  Reserving size (223) for bucket 8
  bucket 4: 30%
  bucket 3: 10%
  bucket 5: 10%
  bucket 3: 20%
  Entering block accumulator loop for bucket 2:
  bucket 5: 20%
  bucket 4: 40%
  bucket 3: 30%
  Calculating Z arrays for bucket 8
  bucket 2: 10%
  bucket 7: 10%
  bucket 2: 20%
  Entering block accumulator loop for bucket 8:
  bucket 5: 30%
  bucket 2: 30%
  bucket 5: 40%
  bucket 8: 10%
  bucket 5: 50%
  bucket 4: 50%
  bucket 8: 20%
  bucket 6: 10%
  bucket 3: 40%
  bucket 2: 40%
  bucket 6: 20%
  bucket 3: 50%
  bucket 2: 50%
  bucket 7: 20%
  bucket 3: 60%
  bucket 5: 60%
  bucket 2: 60%
  bucket 1: 20%
  bucket 3: 70%
  bucket 5: 70%
  bucket 2: 70%
  bucket 4: 60%
  bucket 8: 30%
  bucket 6: 30%
  bucket 4: 70%
  bucket 7: 30%
  bucket 2: 80%
  bucket 4: 80%
  bucket 6: 40%
  bucket 3: 80%
  bucket 6: 50%
  bucket 3: 90%
  bucket 5: 80%
  bucket 6: 60%
  bucket 7: 40%
  bucket 2: 90%
  bucket 6: 70%
  bucket 3: 100%
  bucket 7: 50%
  bucket 5: 90%
  Sorting block of length 72 for bucket 3
  (Using difference cover)
  bucket 7: 60%
  bucket 8: 40%
  bucket 2: 100%
  bucket 5: 100%
  bucket 1: 30%
  Sorting block of length 217 for bucket 2
  (Using difference cover)
  bucket 7: 70%
  bucket 4: 90%
  bucket 7: 80%
  Sorting block of length 101 for bucket 5
  (Using difference cover)
  bucket 8: 50%
  bucket 7: 90%
  bucket 8: 60%
  bucket 6: 80%
  bucket 7: 100%
  bucket 1: 40%
  bucket 4: 100%
  bucket 8: 70%
  Sorting block of length 156 for bucket 4
  (Using difference cover)
  Sorting block of length 217 for bucket 7
  bucket 8: 80%
  bucket 6: 90%
  (Using difference cover)
  bucket 8: 90%
  bucket 1: 50%
  bucket 6: 100%
  Sorting block of length 204 for bucket 6
  (Using difference cover)
  bucket 1: 60%
  bucket 8: 100%
  bucket 1: 70%
  Sorting block of length 67 for bucket 8
  (Using difference cover)
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 148 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 157 for bucket 4
  Sorting block time: 00:00:00
Returning block of 73 for bucket 3
Returning block of 205 for bucket 6
Returning block of 218 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 102 for bucket 5
Returning block of 218 for bucket 7
Returning block of 68 for bucket 8
Returning block of 149 for bucket 1
Exited GFM loop
fchr[A]: 0
fchr[C]: 261
fchr[G]: 560
fchr[T]: 874
fchr[$]: 1189
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194973 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.1.ht2
Wrote 304 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.5.ht2
Wrote 302 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1189
    gbwtLen: 1190
    nodes: 1190
    sz: 298
    gbwtSz: 298
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 75
    offsSz: 300
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 7
    numLines: 7
    gbwtTotLen: 448
    gbwtTotSz: 448
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "FMN_index/FMN_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  FMN.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 216 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 216 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 163.143 (target: 215)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (216) for bucket 1
Getting block 2 of 7
Getting block 3 of 7
  Reserving size (216) for bucket 3
  Reserving size (216) for bucket 2
Getting block 5 of 7
Getting block 6 of 7
  Reserving size (216) for bucket 6
  Reserving size (216) for bucket 5
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 3
Getting block 7 of 7
  Reserving size (216) for bucket 7
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 3:
  bucket 2: 10%
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 5:
Getting block 4 of 7
  bucket 3: 10%
  bucket 5: 10%
  bucket 3: 20%
  bucket 2: 20%
  bucket 3: 30%
  Entering block accumulator loop for bucket 7:
  Reserving size (216) for bucket 4
  bucket 5: 20%
  Entering block accumulator loop for bucket 1:
  bucket 2: 30%
  bucket 5: 30%
  bucket 7: 10%
  bucket 2: 40%
  bucket 3: 40%
  bucket 1: 10%
  bucket 5: 40%
  Calculating Z arrays for bucket 6
  bucket 1: 20%
  bucket 2: 50%
  bucket 5: 50%
  bucket 7: 20%
  bucket 1: 30%
  bucket 2: 60%
  bucket 5: 60%
  bucket 1: 40%
  bucket 5: 70%
  bucket 2: 70%
  Entering block accumulator loop for bucket 6:
  bucket 7: 30%
  bucket 1: 50%
  bucket 7: 40%
  bucket 5: 80%
  bucket 3: 50%
  bucket 6: 10%
  bucket 5: 90%
  bucket 2: 80%
  bucket 6: 20%
  bucket 2: 90%
  bucket 5: 100%
  Calculating Z arrays for bucket 4
  Sorting block of length 192 for bucket 5
  (Using difference cover)
  bucket 6: 30%
  bucket 3: 60%
  bucket 6: 40%
  bucket 3: 70%
  bucket 6: 50%
  bucket 3: 80%
  Entering block accumulator loop for bucket 4:
  bucket 7: 50%
  bucket 4: 10%
  bucket 2: 100%
  bucket 6: 60%
  bucket 4: 20%
  Sorting block of length 198 for bucket 2
  (Using difference cover)
  bucket 4: 30%
  bucket 3: 90%
  bucket 6: 70%
  bucket 7: 60%
  bucket 6: 80%
  bucket 4: 40%
  bucket 6: 90%
  bucket 7: 70%
  bucket 1: 60%
  bucket 4: 50%
  bucket 7: 80%
  bucket 4: 60%
  bucket 7: 90%
  bucket 6: 100%
  bucket 1: 70%
  Sorting block of length 139 for bucket 6
  bucket 7: 100%
  (Using difference cover)
  bucket 3: 100%
  Sorting block of length 170 for bucket 7
  (Using difference cover)
  bucket 4: 70%
  Sorting block of length 96 for bucket 3
  (Using difference cover)
  bucket 4: 80%
  bucket 1: 80%
  bucket 4: 90%
  bucket 1: 90%
  bucket 4: 100%
  Sorting block of length 151 for bucket 4
  (Using difference cover)
  bucket 1: 100%
  Sorting block of length 196 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 193 for bucket 5
  Sorting block time: 00:00:00
Returning block of 199 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 97 for bucket 3
Returning block of 152 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 140 for bucket 6
Returning block of 171 for bucket 7
  Sorting block time: 00:00:00
Returning block of 197 for bucket 1
Exited GFM loop
fchr[A]: 0
fchr[C]: 268
fchr[G]: 523
fchr[T]: 824
fchr[$]: 1148
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194903 bytes to primary GFM file: FMN_index/FMN_index.1.ht2
Wrote 292 bytes to secondary GFM file: FMN_index/FMN_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: FMN_index/FMN_index.5.ht2
Wrote 292 bytes to secondary GFM file: FMN_index/FMN_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1148
    gbwtLen: 1149
    nodes: 1149
    sz: 287
    gbwtSz: 288
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 72
    offsSz: 288
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "Lysine_index/Lysine_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Lysine.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 225 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 225 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 170 (target: 224)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (225) for bucket 1
Getting block 2 of 7
Getting block 3 of 7
  Calculating Z arrays for bucket 1
  Reserving size (225) for bucket 3
Getting block 5 of 7
  Reserving size (225) for bucket 5
  Calculating Z arrays for bucket 3
Getting block 4 of 7
  Entering block accumulator loop for bucket 1:
  Entering block accumulator loop for bucket 3:
  Reserving size (225) for bucket 4
  bucket 3: 10%
  Reserving size (225) for bucket 2
Getting block 7 of 7
  bucket 1: 10%
  Calculating Z arrays for bucket 2
  bucket 3: 20%
Getting block 6 of 7
  Reserving size (225) for bucket 6
  Reserving size (225) for bucket 7
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 5
  bucket 1: 20%
  Calculating Z arrays for bucket 6
  Calculating Z arrays for bucket 7
  bucket 3: 30%
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 7:
  bucket 6: 10%
  bucket 2: 10%
  bucket 6: 20%
  bucket 5: 10%
  bucket 4: 10%
  bucket 3: 40%
  bucket 5: 20%
  bucket 4: 20%
  bucket 3: 50%
  bucket 1: 30%
  bucket 4: 30%
  bucket 6: 30%
  bucket 2: 20%
  bucket 4: 40%
  bucket 5: 30%
  bucket 1: 40%
  bucket 2: 30%
  bucket 4: 50%
  bucket 6: 40%
  bucket 7: 10%
  bucket 2: 40%
  bucket 4: 60%
  bucket 5: 40%
  bucket 1: 50%
  bucket 2: 50%
  bucket 4: 70%
  bucket 2: 60%
  bucket 6: 50%
  bucket 2: 70%
  bucket 3: 60%
  bucket 6: 60%
  bucket 3: 70%
  bucket 4: 80%
  bucket 1: 60%
  bucket 2: 80%
  bucket 1: 70%
  bucket 4: 90%
  bucket 6: 70%
  bucket 1: 80%
  bucket 7: 20%
  bucket 6: 80%
  bucket 7: 30%
  bucket 5: 50%
  bucket 2: 90%
  bucket 7: 40%
  bucket 1: 90%
  bucket 2: 100%
  bucket 1: 100%
  bucket 6: 90%
  bucket 5: 60%
  Sorting block of length 45 for bucket 2
  (Using difference cover)
  bucket 3: 80%
  bucket 6: 100%
  Sorting block of length 216 for bucket 1
  (Using difference cover)
  bucket 7: 50%
  bucket 4: 100%
  bucket 7: 60%
  Sorting block of length 133 for bucket 6
  (Using difference cover)
  Sorting block of length 215 for bucket 4
  (Using difference cover)
  bucket 7: 70%
  bucket 3: 90%
  bucket 7: 80%
  bucket 3: 100%
  bucket 7: 90%
  Sorting block of length 195 for bucket 3
  (Using difference cover)
  bucket 7: 100%
  bucket 5: 70%
  Sorting block of length 165 for bucket 7
  (Using difference cover)
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 221 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 46 for bucket 2
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 216 for bucket 4
  Sorting block time: 00:00:00
Returning block of 222 for bucket 5
  Sorting block time: 00:00:00
Returning block of 217 for bucket 1
Returning block of 196 for bucket 3
  Sorting block time: 00:00:00
Returning block of 134 for bucket 6
  Sorting block time: 00:00:00
Returning block of 166 for bucket 7
Exited GFM loop
fchr[A]: 0
fchr[C]: 264
fchr[G]: 561
fchr[T]: 881
fchr[$]: 1196
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194970 bytes to primary GFM file: Lysine_index/Lysine_index.1.ht2
Wrote 304 bytes to secondary GFM file: Lysine_index/Lysine_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: Lysine_index/Lysine_index.5.ht2
Wrote 304 bytes to secondary GFM file: Lysine_index/Lysine_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1196
    gbwtLen: 1197
    nodes: 1197
    sz: 299
    gbwtSz: 300
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 75
    offsSz: 300
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 7
    numLines: 7
    gbwtTotLen: 448
    gbwtTotSz: 448
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "Mg_sensor_index/Mg_sensor_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Mg_sensor.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 209 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 209 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 138.5 (target: 208)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (209) for bucket 1
Getting block 2 of 8
  Reserving size (209) for bucket 2
Getting block 3 of 8
  Reserving size (209) for bucket 3
  Calculating Z arrays for bucket 2
Getting block 6 of 8
Getting block 4 of 8
  Reserving size (209) for bucket 4
Getting block 7 of 8
  Reserving size (209) for bucket 7
  Calculating Z arrays for bucket 4
  Reserving size (209) for bucket 6
Getting block 8 of 8
  Reserving size (209) for bucket 8
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 6
Getting block 5 of 8
  Reserving size (209) for bucket 5
  Entering block accumulator loop for bucket 2:
  Entering block accumulator loop for bucket 4:
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 5
  Calculating Z arrays for bucket 8
  bucket 2: 10%
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 7
  bucket 2: 20%
  bucket 3: 10%
  Entering block accumulator loop for bucket 8:
  Entering block accumulator loop for bucket 6:
  bucket 3: 20%
  Entering block accumulator loop for bucket 1:
  Entering block accumulator loop for bucket 7:
  bucket 6: 10%
  bucket 8: 10%
  bucket 3: 30%
  bucket 8: 20%
  Entering block accumulator loop for bucket 5:
  bucket 3: 40%
  bucket 6: 20%
  bucket 2: 30%
  bucket 8: 30%
  bucket 3: 50%
  bucket 1: 10%
  bucket 3: 60%
  bucket 2: 40%
  bucket 8: 40%
  bucket 1: 20%
  bucket 7: 10%
  bucket 6: 30%
  bucket 1: 30%
  bucket 2: 50%
  bucket 6: 40%
  bucket 4: 10%
  bucket 3: 70%
  bucket 5: 10%
  bucket 6: 50%
  bucket 5: 20%
  bucket 6: 60%
  bucket 4: 20%
  bucket 5: 30%
  bucket 6: 70%
  bucket 4: 30%
  bucket 2: 60%
  bucket 4: 40%
  bucket 6: 80%
  bucket 2: 70%
  bucket 6: 90%
  bucket 7: 20%
  bucket 5: 40%
  bucket 2: 80%
  bucket 3: 80%
  bucket 2: 90%
  bucket 6: 100%
  bucket 3: 90%
  bucket 5: 50%
  bucket 4: 50%
  bucket 5: 60%
  bucket 4: 60%
  bucket 2: 100%
  bucket 7: 30%
  bucket 4: 70%
  Sorting block of length 203 for bucket 2
  (Using difference cover)
  bucket 3: 100%
  bucket 7: 40%
  bucket 8: 50%
  Sorting block of length 166 for bucket 3
  (Using difference cover)
  bucket 7: 50%
  Sorting block of length 87 for bucket 6
  (Using difference cover)
  bucket 8: 60%
  bucket 7: 60%
  bucket 4: 80%
  bucket 5: 70%
  bucket 1: 40%
  bucket 5: 80%
  bucket 1: 50%
  bucket 4: 90%
  bucket 8: 70%
  bucket 7: 70%
  bucket 8: 80%
  bucket 1: 60%
  bucket 8: 90%
  bucket 7: 80%
  bucket 1: 70%
  bucket 5: 90%
  bucket 7: 90%
  bucket 5: 100%
  bucket 1: 80%
  bucket 8: 100%
  Sorting block of length 131 for bucket 5
  (Using difference cover)
  bucket 1: 90%
  Sorting block of length 11 for bucket 8
  (Using difference cover)
  bucket 7: 100%
  bucket 1: 100%
  Sorting block of length 119 for bucket 1
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 192 for bucket 4
  (Using difference cover)
  Sorting block of length 199 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 204 for bucket 2
  Sorting block time: 00:00:00
Returning block of 88 for bucket 6
  Sorting block time: 00:00:00
Returning block of 167 for bucket 3
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 132 for bucket 5
  Sorting block time: 00:00:00
Returning block of 120 for bucket 1
Returning block of 193 for bucket 4
Returning block of 200 for bucket 7
  Sorting block time: 00:00:00
Returning block of 12 for bucket 8
Exited GFM loop
fchr[A]: 0
fchr[C]: 250
fchr[G]: 527
fchr[T]: 795
fchr[$]: 1115
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194909 bytes to primary GFM file: Mg_sensor_index/Mg_sensor_index.1.ht2
Wrote 284 bytes to secondary GFM file: Mg_sensor_index/Mg_sensor_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8613 bytes to primary GFM file: Mg_sensor_index/Mg_sensor_index.5.ht2
Wrote 284 bytes to secondary GFM file: Mg_sensor_index/Mg_sensor_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1115
    gbwtLen: 1116
    nodes: 1116
    sz: 279
    gbwtSz: 280
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 70
    offsSz: 280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:01
Settings:
  Output files: "MOCO_RNA_motif_index/MOCO_RNA_motif_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  MOCO_RNA_motif.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 215 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 215 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 142.125 (target: 214)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (215) for bucket 1
Getting block 3 of 8
  Reserving size (215) for bucket 3
Getting block 2 of 8
  Reserving size (215) for bucket 2
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 2
Getting block 5 of 8
  Entering block accumulator loop for bucket 2:
Getting block 6 of 8
Getting block 4 of 8
  Reserving size (215) for bucket 4
  Reserving size (215) for bucket 5
Getting block 7 of 8
  Calculating Z arrays for bucket 5
  bucket 2: 10%
  Reserving size (215) for bucket 7
Getting block 8 of 8
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 5:
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 7
  Reserving size (215) for bucket 8
  Calculating Z arrays for bucket 1
  bucket 2: 20%
  bucket 3: 10%
  Reserving size (215) for bucket 6
  Entering block accumulator loop for bucket 1:
  bucket 3: 20%
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 4:
  bucket 3: 30%
  bucket 2: 30%
  Calculating Z arrays for bucket 6
  bucket 3: 40%
  Calculating Z arrays for bucket 8
  bucket 3: 50%
  bucket 2: 40%
  Entering block accumulator loop for bucket 8:
  bucket 5: 10%
  bucket 7: 10%
  bucket 8: 10%
  bucket 7: 20%
  bucket 5: 20%
  bucket 3: 60%
  bucket 2: 50%
  bucket 8: 20%
  bucket 2: 60%
  bucket 5: 30%
  bucket 8: 30%
  bucket 3: 70%
  bucket 2: 70%
  bucket 1: 10%
  Entering block accumulator loop for bucket 6:
  bucket 2: 80%
  bucket 3: 80%
  bucket 4: 10%
  bucket 5: 40%
  bucket 2: 90%
  bucket 8: 40%
  bucket 7: 30%
  bucket 2: 100%
  bucket 3: 90%
  bucket 1: 20%
  bucket 7: 40%
  bucket 1: 30%
  bucket 5: 50%
  Sorting block of length 118 for bucket 2
  (Using difference cover)
  bucket 8: 50%
  bucket 6: 10%
  bucket 8: 60%
  bucket 6: 20%
  bucket 7: 50%
  bucket 1: 40%
  bucket 3: 100%
  bucket 1: 50%
  Sorting block of length 116 for bucket 3
  (Using difference cover)
  bucket 1: 60%
  bucket 4: 20%
  bucket 6: 30%
  bucket 7: 60%
  bucket 1: 70%
  bucket 7: 70%
  bucket 1: 80%
  bucket 6: 40%
  bucket 8: 70%
  bucket 7: 80%
  bucket 1: 90%
  bucket 7: 90%
  bucket 4: 30%
  bucket 6: 50%
  bucket 7: 100%
  bucket 5: 60%
  Sorting block of length 170 for bucket 7
  (Using difference cover)
  bucket 5: 70%
  bucket 4: 40%
  bucket 1: 100%
  Sorting block of length 135 for bucket 1
  (Using difference cover)
  bucket 4: 50%
  bucket 6: 60%
  bucket 4: 60%
  bucket 5: 80%
  bucket 4: 70%
  bucket 6: 70%
  bucket 8: 80%
  bucket 5: 90%
  bucket 4: 80%
  bucket 6: 80%
  bucket 5: 100%
  Sorting block of length 201 for bucket 5
  (Using difference cover)
  bucket 8: 90%
  bucket 4: 90%
  bucket 8: 100%
  bucket 4: 100%
  Sorting block of length 197 for bucket 4
  (Using difference cover)
  Sorting block of length 54 for bucket 8
  (Using difference cover)
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 146 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 119 for bucket 2
  Sorting block time: 00:00:00
Returning block of 117 for bucket 3
  Sorting block time: 00:00:00
Returning block of 147 for bucket 6
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 136 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 171 for bucket 7
Returning block of 55 for bucket 8
Returning block of 202 for bucket 5
Returning block of 198 for bucket 4
Exited GFM loop
fchr[A]: 0
fchr[C]: 291
fchr[G]: 588
fchr[T]: 879
fchr[$]: 1144
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194912 bytes to primary GFM file: MOCO_RNA_motif_index/MOCO_RNA_motif_index.1.ht2
Wrote 292 bytes to secondary GFM file: MOCO_RNA_motif_index/MOCO_RNA_motif_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: MOCO_RNA_motif_index/MOCO_RNA_motif_index.5.ht2
Wrote 292 bytes to secondary GFM file: MOCO_RNA_motif_index/MOCO_RNA_motif_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1144
    gbwtLen: 1145
    nodes: 1145
    sz: 286
    gbwtSz: 287
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 72
    offsSz: 288
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "TPP_index/TPP_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  TPP.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 618 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 618 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 469.857 (target: 617)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (618) for bucket 1
Getting block 2 of 7
  Calculating Z arrays for bucket 1
  Reserving size (618) for bucket 2
Getting block 3 of 7
Getting block 4 of 7
  Reserving size (618) for bucket 3
  Reserving size (618) for bucket 4
  Calculating Z arrays for bucket 3
Getting block 5 of 7
Getting block 6 of 7
  Entering block accumulator loop for bucket 3:
Getting block 7 of 7
  Reserving size (618) for bucket 6
  bucket 3: 10%
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 1:
  Calculating Z arrays for bucket 4
  Reserving size (618) for bucket 7
  Calculating Z arrays for bucket 6
  Reserving size (618) for bucket 5
  bucket 3: 20%
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 2:
  bucket 3: 30%
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 4:
  Entering block accumulator loop for bucket 6:
  bucket 2: 10%
  bucket 3: 40%
  Entering block accumulator loop for bucket 5:
  bucket 6: 10%
  bucket 1: 10%
  bucket 3: 50%
  Entering block accumulator loop for bucket 7:
  bucket 2: 20%
  bucket 1: 20%
  bucket 7: 10%
  bucket 5: 10%
  bucket 4: 10%
  bucket 1: 30%
  bucket 3: 60%
  bucket 6: 20%
  bucket 7: 20%
  bucket 3: 70%
  bucket 1: 40%
  bucket 2: 30%
  bucket 3: 80%
  bucket 6: 30%
  bucket 4: 20%
  bucket 5: 20%
  bucket 3: 90%
  bucket 7: 30%
  bucket 2: 40%
  bucket 6: 40%
  bucket 1: 50%
  bucket 3: 100%
  bucket 7: 40%
  bucket 2: 50%
  bucket 5: 30%
  Sorting block of length 469 for bucket 3
  (Using difference cover)
  bucket 6: 50%
  bucket 2: 60%
  bucket 4: 30%
  bucket 5: 40%
  bucket 2: 70%
  bucket 7: 50%
  bucket 6: 60%
  bucket 5: 50%
  bucket 2: 80%
  bucket 1: 60%
  bucket 7: 60%
  bucket 5: 60%
  bucket 2: 90%
  bucket 1: 70%
  bucket 7: 70%
  bucket 6: 70%
  bucket 5: 70%
  bucket 7: 80%
  bucket 2: 100%
  bucket 1: 80%
  bucket 4: 40%
  Sorting block of length 514 for bucket 2
  (Using difference cover)
  bucket 1: 90%
  bucket 7: 90%
  bucket 4: 50%
  bucket 1: 100%
  bucket 5: 80%
  bucket 7: 100%
  Sorting block of length 513 for bucket 1
  (Using difference cover)
  Sorting block of length 413 for bucket 7
  (Using difference cover)
  bucket 5: 90%
  bucket 4: 60%
  bucket 6: 80%
  bucket 5: 100%
  bucket 4: 70%
  Sorting block of length 596 for bucket 5
  (Using difference cover)
  bucket 6: 90%
  bucket 4: 80%
  bucket 6: 100%
  Sorting block of length 246 for bucket 6
  (Using difference cover)
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 538 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 414 for bucket 7
  Sorting block time: 00:00:00
Returning block of 515 for bucket 2
  Sorting block time: 00:00:00
Returning block of 514 for bucket 1
  Sorting block time: 00:00:00
Returning block of 247 for bucket 6
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 470 for bucket 3
  Sorting block time: 00:00:00
Returning block of 539 for bucket 4
Returning block of 597 for bucket 5
Exited GFM loop
fchr[A]: 0
fchr[C]: 812
fchr[G]: 1668
fchr[T]: 2503
fchr[$]: 3295
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195767 bytes to primary GFM file: TPP_index/TPP_index.1.ht2
Wrote 828 bytes to secondary GFM file: TPP_index/TPP_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 25781 bytes to primary GFM file: TPP_index/TPP_index.5.ht2
Wrote 832 bytes to secondary GFM file: TPP_index/TPP_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 3295
    gbwtLen: 3296
    nodes: 3296
    sz: 824
    gbwtSz: 825
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 206
    offsSz: 824
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 18
    numLines: 18
    gbwtTotLen: 1152
    gbwtTotSz: 1152
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
