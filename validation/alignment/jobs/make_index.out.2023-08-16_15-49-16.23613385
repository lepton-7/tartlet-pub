Settings:
  Output files: "Cobalamin_index/Cobalamin_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Cobalamin.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 448 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 448 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 297.75 (target: 447)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (448) for bucket 1
Getting block 2 of 8
  Reserving size (448) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 3 of 8
  Reserving size (448) for bucket 3
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 1:
  Calculating Z arrays for bucket 3
  bucket 1: 10%
Getting block 4 of 8
  Reserving size (448) for bucket 4
Getting block 6 of 8
Getting block 5 of 8
  Reserving size (448) for bucket 5
  Entering block accumulator loop for bucket 2:
Getting block 7 of 8
  bucket 2: 10%
  Reserving size (448) for bucket 7
  Entering block accumulator loop for bucket 3:
Getting block 8 of 8
  bucket 2: 20%
  Reserving size (448) for bucket 6
  Calculating Z arrays for bucket 7
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 5
  bucket 1: 20%
  bucket 2: 30%
  Calculating Z arrays for bucket 6
  Reserving size (448) for bucket 8
  bucket 1: 30%
  bucket 2: 40%
  bucket 3: 10%
  bucket 1: 40%
  bucket 2: 50%
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 4:
  bucket 1: 50%
  bucket 2: 60%
  Entering block accumulator loop for bucket 7:
  bucket 4: 10%
  bucket 3: 20%
  Calculating Z arrays for bucket 8
  bucket 1: 60%
  bucket 4: 20%
  Entering block accumulator loop for bucket 5:
  bucket 7: 10%
  Entering block accumulator loop for bucket 8:
  bucket 4: 30%
  bucket 2: 70%
  bucket 7: 20%
  bucket 1: 70%
  bucket 6: 10%
  bucket 4: 40%
  bucket 3: 30%
  bucket 2: 80%
  bucket 5: 10%
  bucket 6: 20%
  bucket 1: 80%
  bucket 2: 90%
  bucket 7: 30%
  bucket 5: 20%
  bucket 1: 90%
  bucket 8: 10%
  bucket 6: 30%
  bucket 2: 100%
  bucket 1: 100%
  Sorting block of length 390 for bucket 2
  (Using difference cover)
  Sorting block of length 292 for bucket 1
  (Using difference cover)
  bucket 3: 40%
  bucket 7: 40%
  bucket 4: 50%
  bucket 8: 20%
  bucket 3: 50%
  bucket 7: 50%
  bucket 8: 30%
  bucket 6: 40%
  bucket 4: 60%
  bucket 3: 60%
  bucket 7: 60%
  bucket 6: 50%
  bucket 4: 70%
  bucket 8: 40%
  bucket 3: 70%
  bucket 6: 60%
  bucket 4: 80%
  bucket 8: 50%
  bucket 5: 30%
  bucket 8: 60%
  bucket 4: 90%
  bucket 5: 40%
  bucket 8: 70%
  bucket 7: 70%
  bucket 3: 80%
  bucket 6: 70%
  bucket 4: 100%
  bucket 7: 80%
  Sorting block of length 333 for bucket 4
  bucket 5: 50%
  (Using difference cover)
  bucket 3: 90%
  bucket 6: 80%
  bucket 8: 80%
  bucket 3: 100%
  bucket 8: 90%
  bucket 6: 90%
  Sorting block of length 274 for bucket 3
  bucket 5: 60%
  (Using difference cover)
  bucket 6: 100%
  bucket 7: 90%
  bucket 5: 70%
  bucket 8: 100%
  Sorting block of length 65 for bucket 8
  (Using difference cover)
  bucket 7: 100%
  Sorting block of length 390 for bucket 7
  (Using difference cover)
  bucket 5: 80%
  Sorting block of length 397 for bucket 6
  (Using difference cover)
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 241 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 391 for bucket 2
Returning block of 242 for bucket 5
  Sorting block time: 00:00:00
Returning block of 398 for bucket 6
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 334 for bucket 4
Returning block of 293 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 66 for bucket 8
Returning block of 275 for bucket 3
  Sorting block time: 00:00:00
Returning block of 391 for bucket 7
Exited GFM loop
fchr[A]: 0
fchr[C]: 388
fchr[G]: 1225
fchr[T]: 2015
fchr[$]: 2389
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195409 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.1.ht2
Wrote 604 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17325 bytes to primary GFM file: Cobalamin_index/Cobalamin_index.5.ht2
Wrote 604 bytes to secondary GFM file: Cobalamin_index/Cobalamin_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2389
    gbwtLen: 2390
    nodes: 2390
    sz: 598
    gbwtSz: 598
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 150
    offsSz: 600
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 13
    numLines: 13
    gbwtTotLen: 832
    gbwtTotSz: 832
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "Glycine_index/Glycine_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Glycine.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 410 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 410 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.571 (target: 409)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (410) for bucket 1
Getting block 2 of 7
  Reserving size (410) for bucket 2
  Calculating Z arrays for bucket 1
  Calculating Z arrays for bucket 2
Getting block 3 of 7
  Reserving size (410) for bucket 3
  Entering block accumulator loop for bucket 1:
  Calculating Z arrays for bucket 3
  bucket 1: 10%
  Entering block accumulator loop for bucket 2:
  bucket 1: 20%
Getting block 4 of 7
  Reserving size (410) for bucket 4
  Entering block accumulator loop for bucket 3:
Getting block 5 of 7
  Reserving size (410) for bucket 5
  bucket 1: 30%
  bucket 2: 10%
  Calculating Z arrays for bucket 4
  bucket 1: 40%
Getting block 7 of 7
  Reserving size (410) for bucket 7
  bucket 3: 10%
  Entering block accumulator loop for bucket 4:
  bucket 2: 20%
  bucket 3: 20%
  Calculating Z arrays for bucket 7
  bucket 2: 30%
  Calculating Z arrays for bucket 5
Getting block 6 of 7
  bucket 1: 50%
  Entering block accumulator loop for bucket 7:
  bucket 1: 60%
  bucket 2: 40%
  bucket 4: 10%
  Entering block accumulator loop for bucket 5:
  bucket 1: 70%
  bucket 2: 50%
  bucket 7: 10%
  bucket 1: 80%
  bucket 2: 60%
  bucket 4: 20%
  bucket 3: 30%
  bucket 1: 90%
  Reserving size (410) for bucket 6
  bucket 1: 100%
  bucket 7: 20%
  bucket 5: 10%
  bucket 3: 40%
  Sorting block of length 368 for bucket 1
  (Using difference cover)
  bucket 4: 30%
  bucket 2: 70%
  bucket 5: 20%
  bucket 4: 40%
  bucket 2: 80%
  bucket 7: 30%
  bucket 3: 50%
  bucket 4: 50%
  bucket 5: 30%
  bucket 2: 90%
  bucket 7: 40%
  bucket 5: 40%
  bucket 2: 100%
  bucket 3: 60%
  Sorting block of length 404 for bucket 2
  (Using difference cover)
  bucket 7: 50%
  bucket 5: 50%
  bucket 4: 60%
  bucket 3: 70%
  bucket 7: 60%
  bucket 4: 70%
  bucket 5: 60%
  bucket 7: 70%
  bucket 4: 80%
  bucket 5: 70%
  bucket 7: 80%
  bucket 4: 90%
  bucket 3: 80%
  bucket 5: 80%
  bucket 4: 100%
  Sorting block of length 358 for bucket 4
  bucket 5: 90%
  (Using difference cover)
  bucket 7: 90%
  bucket 3: 90%
  bucket 5: 100%
  bucket 7: 100%
  Sorting block of length 350 for bucket 5
  (Using difference cover)
  Calculating Z arrays for bucket 6
  Sorting block of length 399 for bucket 7
  (Using difference cover)
  bucket 3: 100%
  Sorting block of length 156 for bucket 3
  (Using difference cover)
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 146 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 359 for bucket 4
  Sorting block time: 00:00:00
Returning block of 157 for bucket 3
Returning block of 351 for bucket 5
  Sorting block time: 00:00:00
Returning block of 405 for bucket 2
Returning block of 400 for bucket 7
  Sorting block time: 00:00:00
Returning block of 369 for bucket 1
  Sorting block time: 00:00:00
Returning block of 147 for bucket 6
Exited GFM loop
fchr[A]: 0
fchr[C]: 419
fchr[G]: 1152
fchr[T]: 1821
fchr[$]: 2187
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195339 bytes to primary GFM file: Glycine_index/Glycine_index.1.ht2
Wrote 552 bytes to secondary GFM file: Glycine_index/Glycine_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17197 bytes to primary GFM file: Glycine_index/Glycine_index.5.ht2
Wrote 554 bytes to secondary GFM file: Glycine_index/Glycine_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2187
    gbwtLen: 2188
    nodes: 2188
    sz: 547
    gbwtSz: 548
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 137
    offsSz: 548
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 12
    numLines: 12
    gbwtTotLen: 768
    gbwtTotSz: 768
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:01
Settings:
  Output files: "M-box_index/M-box_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  M-box.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 439 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 439 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 333.857 (target: 438)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
  Reserving size (439) for bucket 1
  Calculating Z arrays for bucket 1
Getting block 2 of 7
  Entering block accumulator loop for bucket 1:
  Reserving size (439) for bucket 2
Getting block 3 of 7
  bucket 1: 10%
  Calculating Z arrays for bucket 2
Getting block 4 of 7
  Reserving size (439) for bucket 4
Getting block 5 of 7
  Reserving size (439) for bucket 5
  Entering block accumulator loop for bucket 2:
Getting block 7 of 7
Getting block 6 of 7
  Reserving size (439) for bucket 7
  Reserving size (439) for bucket 6
  Reserving size (439) for bucket 3
  bucket 1: 20%
  Calculating Z arrays for bucket 5
  bucket 1: 30%
  Calculating Z arrays for bucket 4
  bucket 2: 10%
  Calculating Z arrays for bucket 7
  bucket 1: 40%
  Calculating Z arrays for bucket 6
  bucket 1: 50%
  bucket 2: 20%
  bucket 1: 60%
  Calculating Z arrays for bucket 3
  bucket 1: 70%
  bucket 2: 30%
  bucket 1: 80%
  bucket 2: 40%
  bucket 1: 90%
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 7:
  bucket 1: 100%
  bucket 2: 50%
  bucket 6: 10%
  Entering block accumulator loop for bucket 4:
  bucket 2: 60%
  Sorting block of length 430 for bucket 1
  (Using difference cover)
  Entering block accumulator loop for bucket 5:
  bucket 2: 70%
  bucket 6: 20%
  bucket 7: 10%
  bucket 2: 80%
  bucket 5: 10%
  Entering block accumulator loop for bucket 3:
  bucket 6: 30%
  bucket 5: 20%
  bucket 7: 20%
  bucket 4: 10%
  bucket 2: 90%
  bucket 3: 10%
  bucket 7: 30%
  bucket 2: 100%
  bucket 5: 30%
  Sorting block of length 245 for bucket 2
  (Using difference cover)
  bucket 7: 40%
  bucket 4: 20%
  bucket 6: 40%
  bucket 5: 40%
  bucket 7: 50%
  bucket 4: 30%
  bucket 6: 50%
  bucket 7: 60%
  bucket 3: 20%
  bucket 7: 70%
  bucket 6: 60%
  bucket 4: 40%
  bucket 3: 30%
  bucket 7: 80%
  bucket 6: 70%
  bucket 4: 50%
  bucket 3: 40%
  bucket 7: 90%
  bucket 4: 60%
  bucket 5: 50%
  bucket 3: 50%
  bucket 4: 70%
  bucket 5: 60%
  bucket 7: 100%
  bucket 3: 60%
  Sorting block of length 177 for bucket 7
  (Using difference cover)
  bucket 6: 80%
  bucket 5: 70%
  bucket 3: 70%
  bucket 4: 80%
  bucket 5: 80%
  bucket 3: 80%
  bucket 4: 90%
  bucket 6: 90%
  bucket 3: 90%
  bucket 5: 90%
  bucket 4: 100%
  bucket 6: 100%
  bucket 5: 100%
  bucket 3: 100%
  Sorting block of length 333 for bucket 6
  (Using difference cover)
  Sorting block of length 408 for bucket 3
  (Using difference cover)
  Sorting block of length 437 for bucket 4
  (Using difference cover)
  Sorting block of length 307 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 431 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 178 for bucket 7
  Sorting block time: 00:00:00
Returning block of 438 for bucket 4
Returning block of 308 for bucket 5
Returning block of 246 for bucket 2
  Sorting block time: 00:00:00
Returning block of 409 for bucket 3
  Sorting block time: 00:00:00
Returning block of 334 for bucket 6
Exited GFM loop
fchr[A]: 0
fchr[C]: 405
fchr[G]: 1115
fchr[T]: 1857
fchr[$]: 2343
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195403 bytes to primary GFM file: M-box_index/M-box_index.1.ht2
Wrote 592 bytes to secondary GFM file: M-box_index/M-box_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17325 bytes to primary GFM file: M-box_index/M-box_index.5.ht2
Wrote 592 bytes to secondary GFM file: M-box_index/M-box_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2343
    gbwtLen: 2344
    nodes: 2344
    sz: 586
    gbwtSz: 587
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 13
    numLines: 13
    gbwtTotLen: 832
    gbwtTotSz: 832
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "SAM-IV_index/SAM-IV_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  SAM-IV.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 210 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 210 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 159 (target: 209)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
Getting block 2 of 7
  Reserving size (210) for bucket 2
Getting block 3 of 7
  Reserving size (210) for bucket 3
  Calculating Z arrays for bucket 2
Getting block 4 of 7
Getting block 6 of 7
  Reserving size (210) for bucket 4
  Entering block accumulator loop for bucket 2:
Getting block 7 of 7
  Calculating Z arrays for bucket 4
Getting block 5 of 7
  Reserving size (210) for bucket 1
  Calculating Z arrays for bucket 3
  Reserving size (210) for bucket 5
  Calculating Z arrays for bucket 5
  Reserving size (210) for bucket 7
  Reserving size (210) for bucket 6
  bucket 2: 10%
  Calculating Z arrays for bucket 6
  bucket 2: 20%
  Calculating Z arrays for bucket 7
  bucket 2: 30%
  Entering block accumulator loop for bucket 6:
  bucket 2: 40%
  Calculating Z arrays for bucket 1
  bucket 2: 50%
  Entering block accumulator loop for bucket 4:
  bucket 6: 10%
  Entering block accumulator loop for bucket 1:
  bucket 6: 20%
  bucket 2: 60%
  Entering block accumulator loop for bucket 5:
  bucket 2: 70%
  Entering block accumulator loop for bucket 3:
  bucket 4: 10%
  bucket 3: 10%
  bucket 1: 10%
  Entering block accumulator loop for bucket 7:
  bucket 2: 80%
  bucket 4: 20%
  bucket 3: 20%
  bucket 4: 30%
  bucket 6: 30%
  bucket 3: 30%
  bucket 2: 90%
  bucket 3: 40%
  bucket 1: 20%
  bucket 3: 50%
  bucket 6: 40%
  bucket 2: 100%
  bucket 5: 10%
  bucket 6: 50%
  bucket 4: 40%
  bucket 5: 20%
  bucket 4: 50%
  bucket 7: 10%
  Sorting block of length 128 for bucket 2
  (Using difference cover)
  bucket 6: 60%
  bucket 5: 30%
  bucket 6: 70%
  bucket 4: 60%
  bucket 5: 40%
  bucket 6: 80%
  bucket 3: 60%
  bucket 6: 90%
  bucket 3: 70%
  bucket 6: 100%
  bucket 5: 50%
  bucket 4: 70%
  bucket 1: 30%
  bucket 5: 60%
  bucket 3: 80%
  bucket 1: 40%
  bucket 7: 20%
  bucket 5: 70%
  bucket 3: 90%
  bucket 4: 80%
  bucket 1: 50%
  bucket 3: 100%
  bucket 5: 80%
  bucket 7: 30%
  Sorting block of length 172 for bucket 6
  (Using difference cover)
  bucket 5: 90%
  Sorting block of length 139 for bucket 3
  (Using difference cover)
  bucket 4: 90%
  bucket 5: 100%
  Sorting block of length 207 for bucket 5
  bucket 1: 60%
  bucket 4: 100%
  bucket 1: 70%
  Sorting block of length 188 for bucket 4
  (Using difference cover)
  bucket 7: 40%
  bucket 1: 80%
  (Using difference cover)
  bucket 7: 50%
  bucket 1: 90%
  bucket 7: 60%
  bucket 1: 100%
  bucket 7: 70%
  Sorting block of length 201 for bucket 1
  (Using difference cover)
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 78 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 129 for bucket 2
  Sorting block time: 00:00:00
Returning block of 173 for bucket 6
Returning block of 208 for bucket 5
Returning block of 140 for bucket 3
  Sorting block time: 00:00:00
Returning block of 189 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 202 for bucket 1
Returning block of 79 for bucket 7
Exited GFM loop
fchr[A]: 0
fchr[C]: 209
fchr[G]: 571
fchr[T]: 910
fchr[$]: 1119
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194905 bytes to primary GFM file: SAM-IV_index/SAM-IV_index.1.ht2
Wrote 284 bytes to secondary GFM file: SAM-IV_index/SAM-IV_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: SAM-IV_index/SAM-IV_index.5.ht2
Wrote 284 bytes to secondary GFM file: SAM-IV_index/SAM-IV_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1119
    gbwtLen: 1120
    nodes: 1120
    sz: 280
    gbwtSz: 281
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 70
    offsSz: 280
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 6
    numLines: 6
    gbwtTotLen: 384
    gbwtTotSz: 384
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
Settings:
  Output files: "TPP_index/TPP_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  TPP.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 417 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 417 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 11 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 276.625 (target: 416)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 8
  Reserving size (417) for bucket 1
Getting block 2 of 8
Getting block 3 of 8
  Reserving size (417) for bucket 3
  Calculating Z arrays for bucket 1
  Reserving size (417) for bucket 2
  Entering block accumulator loop for bucket 1:
  Calculating Z arrays for bucket 3
Getting block 4 of 8
  Entering block accumulator loop for bucket 3:
  Reserving size (417) for bucket 4
  Calculating Z arrays for bucket 2
Getting block 6 of 8
Getting block 5 of 8
Getting block 7 of 8
Getting block 8 of 8
  Entering block accumulator loop for bucket 2:
  bucket 1: 10%
  Reserving size (417) for bucket 7
  Reserving size (417) for bucket 6
  bucket 1: 20%
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 7
  Reserving size (417) for bucket 8
  bucket 2: 10%
  Calculating Z arrays for bucket 8
  bucket 1: 30%
  bucket 2: 20%
  Reserving size (417) for bucket 5
  Entering block accumulator loop for bucket 8:
  Calculating Z arrays for bucket 5
  bucket 2: 30%
  bucket 3: 10%
  bucket 8: 10%
  Calculating Z arrays for bucket 6
  bucket 2: 40%
  Entering block accumulator loop for bucket 4:
  bucket 8: 20%
  Entering block accumulator loop for bucket 5:
  bucket 8: 30%
  bucket 3: 20%
  bucket 1: 40%
  bucket 4: 10%
  bucket 2: 50%
  bucket 1: 50%
  bucket 5: 10%
  Entering block accumulator loop for bucket 6:
  Entering block accumulator loop for bucket 7:
  bucket 2: 60%
  bucket 8: 40%
  bucket 3: 30%
  bucket 1: 60%
  bucket 4: 20%
  bucket 5: 20%
  bucket 2: 70%
  bucket 7: 10%
  bucket 4: 30%
  bucket 2: 80%
  bucket 6: 10%
  bucket 3: 40%
  bucket 5: 30%
  bucket 1: 70%
  bucket 8: 50%
  bucket 7: 20%
  bucket 1: 80%
  bucket 4: 40%
  bucket 2: 90%
  bucket 3: 50%
  bucket 5: 40%
  bucket 6: 20%
  bucket 8: 60%
  bucket 4: 50%
  bucket 3: 60%
  bucket 1: 90%
  bucket 2: 100%
  bucket 7: 30%
  Sorting block of length 300 for bucket 2
  (Using difference cover)
  bucket 1: 100%
  Sorting block of length 406 for bucket 1
  (Using difference cover)
  bucket 5: 50%
  bucket 4: 60%
  bucket 5: 60%
  bucket 8: 70%
  bucket 6: 30%
  bucket 4: 70%
  bucket 3: 70%
  bucket 5: 70%
  bucket 7: 40%
  bucket 4: 80%
  bucket 5: 80%
  bucket 3: 80%
  bucket 7: 50%
  bucket 6: 40%
  bucket 5: 90%
  bucket 7: 60%
  bucket 8: 80%
  bucket 6: 50%
  bucket 8: 90%
  bucket 7: 70%
  bucket 3: 90%
  bucket 8: 100%
  bucket 4: 90%
  bucket 6: 60%
  bucket 5: 100%
  Sorting block of length 170 for bucket 8
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 230 for bucket 4
  (Using difference cover)
  bucket 7: 80%
  bucket 3: 100%
  Sorting block of length 268 for bucket 3
  (Using difference cover)
  bucket 6: 70%
  bucket 7: 90%
  Sorting block of length 236 for bucket 5
  (Using difference cover)
  bucket 7: 100%
  Sorting block of length 312 for bucket 7
  (Using difference cover)
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 291 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 407 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 237 for bucket 5
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 313 for bucket 7
Returning block of 171 for bucket 8
  Sorting block time: 00:00:00
Returning block of 269 for bucket 3
Returning block of 301 for bucket 2
Returning block of 292 for bucket 6
  Sorting block time: 00:00:00
Returning block of 231 for bucket 4
Exited GFM loop
fchr[A]: 0
fchr[C]: 391
fchr[G]: 1129
fchr[T]: 1897
fchr[$]: 2220
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4195331 bytes to primary GFM file: TPP_index/TPP_index.1.ht2
Wrote 560 bytes to secondary GFM file: TPP_index/TPP_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 17197 bytes to primary GFM file: TPP_index/TPP_index.5.ht2
Wrote 560 bytes to secondary GFM file: TPP_index/TPP_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 2220
    gbwtLen: 2221
    nodes: 2221
    sz: 555
    gbwtSz: 556
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 139
    offsSz: 556
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 12
    numLines: 12
    gbwtTotLen: 768
    gbwtTotSz: 768
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:01
Settings:
  Output files: "ydaO-yuaA_index/ydaO-yuaA_index.*.ht2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Local offset rate: 3 (one in 8)
  Local fTable chars: 6
  Local sequence length: 57344
  Local sequence overlap between two consecutive indexes: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ydaO-yuaA.fna
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to read SNPs and splice sites: 00:00:00
Using parameters --bmax 229 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 229 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 173.714 (target: 228)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering GFM loop
Getting block 1 of 7
Getting block 2 of 7
  Reserving size (229) for bucket 2
  Reserving size (229) for bucket 1
  Calculating Z arrays for bucket 2
Getting block 3 of 7
Getting block 4 of 7
  Reserving size (229) for bucket 4
  Calculating Z arrays for bucket 4
  Calculating Z arrays for bucket 1
Getting block 5 of 7
  Reserving size (229) for bucket 3
  Entering block accumulator loop for bucket 4:
Getting block 6 of 7
  Reserving size (229) for bucket 6
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 3
  bucket 4: 10%
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 1:
  Reserving size (229) for bucket 5
Getting block 7 of 7
  Reserving size (229) for bucket 7
  Entering block accumulator loop for bucket 6:
  bucket 1: 10%
  Entering block accumulator loop for bucket 3:
  Calculating Z arrays for bucket 7
  bucket 3: 10%
  bucket 4: 20%
  Entering block accumulator loop for bucket 7:
  bucket 2: 10%
  bucket 6: 10%
  bucket 4: 30%
  bucket 7: 10%
  Calculating Z arrays for bucket 5
  bucket 2: 20%
  bucket 4: 40%
  bucket 6: 20%
  bucket 7: 20%
  bucket 2: 30%
  bucket 6: 30%
  bucket 3: 20%
  bucket 2: 40%
  bucket 1: 20%
  bucket 4: 50%
  bucket 1: 30%
  bucket 3: 30%
  Entering block accumulator loop for bucket 5:
  bucket 1: 40%
  bucket 2: 50%
  bucket 1: 50%
  bucket 4: 60%
  bucket 6: 40%
  bucket 5: 10%
  bucket 3: 40%
  bucket 2: 60%
  bucket 5: 20%
  bucket 4: 70%
  bucket 7: 30%
  bucket 1: 60%
  bucket 5: 30%
  bucket 7: 40%
  bucket 6: 50%
  bucket 7: 50%
  bucket 4: 80%
  bucket 6: 60%
  bucket 5: 40%
  bucket 6: 70%
  bucket 4: 90%
  bucket 7: 60%
  bucket 2: 70%
  bucket 1: 70%
  bucket 4: 100%
  bucket 6: 80%
  Sorting block of length 188 for bucket 4
  (Using difference cover)
  bucket 2: 80%
  bucket 6: 90%
  bucket 5: 50%
  bucket 3: 50%
  bucket 2: 90%
  bucket 3: 60%
  bucket 6: 100%
  bucket 2: 100%
  Sorting block of length 193 for bucket 6
  bucket 1: 80%
  bucket 5: 60%
  bucket 3: 70%
  (Using difference cover)
  bucket 1: 90%
  bucket 5: 70%
  Sorting block of length 189 for bucket 2
  (Using difference cover)
  bucket 7: 70%
  bucket 3: 80%
  bucket 1: 100%
  bucket 3: 90%
  bucket 5: 80%
  Sorting block of length 188 for bucket 1
  (Using difference cover)
  bucket 7: 80%
  bucket 5: 90%
  bucket 7: 90%
  bucket 3: 100%
  bucket 7: 100%
  bucket 5: 100%
  Sorting block of length 83 for bucket 7
  (Using difference cover)
  Sorting block of length 156 for bucket 3
  (Using difference cover)
  Sorting block of length 219 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 190 for bucket 2
  Sorting block time: 00:00:00
Returning block of 189 for bucket 1
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 157 for bucket 3
  Sorting block time: 00:00:00
Returning block of 194 for bucket 6
Returning block of 189 for bucket 4
  Sorting block time: 00:00:00
  Sorting block time: 00:00:00
Returning block of 84 for bucket 7
Returning block of 220 for bucket 5
Exited GFM loop
fchr[A]: 0
fchr[C]: 220
fchr[G]: 630
fchr[T]: 1019
fchr[$]: 1222
Exiting GFM::buildToDisk()
Returning from initFromVector
Wrote 4194970 bytes to primary GFM file: ydaO-yuaA_index/ydaO-yuaA_index.1.ht2
Wrote 312 bytes to secondary GFM file: ydaO-yuaA_index/ydaO-yuaA_index.2.ht2
Re-opening _in1 and _in2 as input streams
Returning from GFM constructor
Returning from initFromVector
Wrote 8677 bytes to primary GFM file: ydaO-yuaA_index/ydaO-yuaA_index.5.ht2
Wrote 310 bytes to secondary GFM file: ydaO-yuaA_index/ydaO-yuaA_index.6.ht2
Re-opening _in5 and _in5 as input streams
Returning from HierEbwt constructor
Headers:
    len: 1222
    gbwtLen: 1223
    nodes: 1223
    sz: 306
    gbwtSz: 306
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 0
    eftabSz: 0
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 77
    offsSz: 308
    lineSz: 64
    sideSz: 64
    sideGbwtSz: 48
    sideGbwtLen: 192
    numSides: 7
    numLines: 7
    gbwtTotLen: 448
    gbwtTotSz: 448
    reverse: 0
    linearFM: Yes
Total time for call to driver() for forward index: 00:00:00
